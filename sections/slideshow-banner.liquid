{% comment %}
  Quadratum • Slideshow Banner (v5.2 — fixed)
  Key fixes:
  - Real min-height via --min-h (no Tailwind dependency)
  - Fade stacking + pointer-events default
  - Safer video URL guard
  - Progress double-rAF restart
  - Minor ARIA tidy (dots)
{% endcomment %}

{{ 'section-slideshow.js'  | asset_url | script_tag }}
{{ 'section-slideshow.css' | asset_url | stylesheet_tag }}

{% liquid
  assign s = section.settings

  assign is_outline = false
  if s.button_mode == 'outline'
    assign is_outline = true
  endif

  assign container_pad_x = s.container_mode | default: 'contained'
  if container_pad_x == 'contained'
    assign container_pad_x = 'px-4 md:px-6'
  else
    assign container_pad_x = ''
  endif

  assign visibility_classes = ''
  if s.hide_on_mobile
    assign visibility_classes = visibility_classes | append: ' hidden md:block'
  endif
  if s.hide_on_desktop
    assign visibility_classes = visibility_classes | append: ' md:hidden'
  endif

  assign s = section.settings
  assign min_h_val = '75vh'
  if s.min_height == 'min-h-screen'
    assign min_h_val = '100vh'
  elsif s.min_height == 'min-h-[60vh]'
    assign min_h_val = '60vh'
  elsif s.min_height == 'min-h-[75vh]'
    assign min_h_val = '75vh'
  endif
%}

<section
  id="{{ s.anchor_id | default: 'section-' | append: section.id }}"
  class="q-hero q-hero--{{ s.layout_mode | default: 'hero' }}{{ visibility_classes }}"
  role="region"
  aria-label="{{ s.region_label | default: 'Slideshow banner' | escape }}"
  data-q-carousel
  data-layout="{{ s.layout_mode | default: 'hero' }}"
  data-autoplay="{{ s.autoplay }}"
  data-interval="{{ s.autoplay_interval | default: 5 }}"
  data-transition="{{ s.transition | default: 'slide' }}"
  data-show-progress="{{ s.show_progress }}"
  data-progress-height="{{ s.progress_height | default: 3 }}"
  data-reduced-motion-aware="true"
  style="
    --min-h: {{ min_h_value }};
    --arr-size: {{ s.arrows_size | default: 40 }}px;
    --arr-radius: {{ s.arrows_radius | default: 9999 }}px;
    --arr-bg: {{ s.arrows_bg | default: 'rgba(0,0,0,.4)' }};
    --arr-fg: {{ s.arrows_fg | default: '#fff' }};
    --arr-shadow: {% if s.arrows_shadow %}0 8px 20px rgba(0,0,0,.25){% else %}none{% endif %};
    --dots-size: {{ s.dots_size | default: 10 }}px;
    --dots-radius: {{ s.dots_radius | default: 9999 }}px;
    --dots-gap: {{ s.dots_gap | default: 8 }}px;
    --dots-color: {{ s.dots_color | default: 'rgba(255,255,255,.55)' }};
    --dots-active: {{ s.dots_active_color | default: '#ffffff' }};
    --btn-fw: {{ s.button_font_weight | default: 600 }};
    --btn-tt: {% if s.button_uppercase %}uppercase{% else %}none{% endif %};
    --min-h: {{ min_h_val }};
  "
>
  {% if s.show_progress and section.blocks.size > 1 and s.autoplay %}
    <div class="q-progress-wrap q-progress--{{ s.progress_position | default: 'top' }}" aria-hidden="true">
      <div data-q-progress class="q-progress-bar"
           style="height: {{ s.progress_height | default: 3 }}px; background-color: {{ s.progress_color | default: '#ffffff' }}; border-radius: {{ s.progress_radius | default: 0 }}px;"></div>
    </div>
  {% endif %}

  <div class="q-track-outer">
    <div class="q-track" tabindex="0" aria-roledescription="carousel" aria-live="{% if s.autoplay %}off{% else %}polite{% endif %}" data-q-carousel-track>
      {% assign total = section.blocks.size %}
      {% for block in section.blocks %}
        {% assign b = block.settings %}

        {% liquid
          # Placement / alignment / motion (with section defaults)
          assign text_align = b.text_alignment | default: s.default_text_alignment | default: 'center'

          assign pos_m = b.content_position_mobile | default: s.default_content_position_mobile | default: 'center_center'
          assign pm = pos_m | split: '_'
          assign v_m = pm[0] | default: 'center'
          assign h_m = pm[1] | default: 'center'

          assign pos_d = b.content_position | default: s.default_content_position | default: 'center_center'
          assign pd = pos_d | split: '_'
          assign v_d = pd[0] | default: 'center'
          assign h_d = pd[1] | default: 'center'

          assign motion_preset = b.motion_preset | default: s.default_motion_preset | default: 'fade-up'

          assign cta_align = b.cta_group_align | default: 'center'
          assign cta_justify = 'center'
          if cta_align == 'left'
            assign cta_justify = 'flex-start'
          endif
          if cta_align == 'right'
            assign cta_justify = 'flex-end'
          endif

          # Normalize align values (Safari/Flexbox)
          assign v_m_css = v_m
          assign h_m_css = h_m
          assign v_d_css = v_d
          assign h_d_css = h_d
          if v_m == 'start'
            assign v_m_css = 'flex-start'
          elsif v_m == 'end'
            assign v_m_css = 'flex-end'
          endif
          if h_m == 'start'
            assign h_m_css = 'flex-start'
          elsif h_m == 'end'
            assign h_m_css = 'flex-end'
          endif
          if v_d == 'start'
            assign v_d_css = 'flex-start'
          elsif v_d == 'end'
            assign v_d_css = 'flex-end'
          endif
          if h_d == 'start'
            assign h_d_css = 'flex-start'
          elsif h_d == 'end'
            assign h_d_css = 'flex-end'
          endif

          # Colors / overlay
          assign overlay_color = b.overlay_color | default: s.overlay_color | default: '#000000'
          assign overlay_op = b.overlay_opacity | default: s.overlay_opacity | default: 40
          assign overlay_op_float = overlay_op | divided_by: 100.0
          assign focal = b.bg_position | default: s.bg_position | default: 'center'

          # Media inputs
          assign img_main = b.background_image
          assign img_mobile = b.mobile_image
          assign img_alt = b.image_alt | default: b.heading | default: ''

          # Only treat as video if URL-like
          assign has_video = false
          if b.background_video != blank and b.background_video contains 'http'
            assign has_video = true
          endif

          # URL/handle awareness (allow strings in ImagePickers defensively)
          assign main_is_http = false
          assign mob_is_http  = false
          if img_main contains 'http' or img_main contains 'cdn.shopify.com'
            assign main_is_http = true
          endif
          if img_mobile contains 'http' or img_mobile contains 'cdn.shopify.com'
            assign mob_is_http = true
          endif

          assign main_is_handle = false
          assign mob_is_handle  = false
          if img_main contains 'shopify://'
            assign main_is_handle = true
          endif
          if img_mobile contains 'shopify://' 
            assign mob_is_handle = true
          endif

          # Compute safe sources
          assign main_src_1500 = ''
          if main_is_http
            assign main_src_1500 = img_main
          elsif main_is_handle
            assign main_src_1500 = img_main | file_url
          elsif img_main != blank
            assign main_src_1500 = img_main | image_url: width: 1500
          endif

          assign mobile_src_1500 = ''
          if mob_is_http
            assign mobile_src_1500 = img_mobile
          elsif mob_is_handle
            assign mobile_src_1500 = img_mobile | file_url
          elsif img_mobile != blank
            assign mobile_src_1500 = img_mobile | image_url: width: 1500
          endif

          assign has_any_media = false
          if has_video or main_src_1500 != '' or mobile_src_1500 != ''
            assign has_any_media = true
          endif
        %}

        <div class="q-slide"
             aria-roledescription="slide"
             aria-label="Slide {{ forloop.index }} of {{ total }}"
             data-q-slide
             {% if s.transition == 'fade' %}style="opacity:{% if forloop.first %}1{% else %}0{% endif %};"{% endif %}
        >
          {% if s.layout_mode == 'split' %}
            <!-- SPLIT layout -->
            <div class="q-split">
              <div class="q-split__media{% if b.ken_burns and has_video == false %} q-ken-burns{% endif %}">
                {% if has_video %}
                  <video class="q-video" autoplay muted loop playsinline {% if forloop.first %}preload="auto"{% else %}preload="metadata"{% endif %} poster="{{ main_src_1500 }}">
                    <source src="{{ b.background_video | escape }}" type="video/mp4">
                  </video>
                {% elsif main_src_1500 != '' or mobile_src_1500 != '' %}
                  {% assign wset = '600,900,1200,1500,1800,2100,2500' | split: ',' %}
                  <picture>
                    {% if mobile_src_1500 != '' %}
                      {% if mob_is_http or mob_is_handle %}
                        <source media="(max-width: 767px)" srcset="{{ mobile_src_1500 }}" sizes="(min-width: 990px) 50vw, 100vw">
                      {% else %}
                        <source media="(max-width: 767px)" srcset="{% for w in wset %}{{ img_mobile | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}" sizes="(min-width: 990px) 50vw, 100vw">
                      {% endif %}
                    {% endif %}
                    <img class="q-img"
                         alt="{{ img_alt | escape }}"
                         {% if forloop.first %}loading="eager" fetchpriority="high"{% else %}loading="lazy" fetchpriority="auto"{% endif %}
                         decoding="async"
                         src="{{ main_src_1500 | default: mobile_src_1500 }}"
                         {% if main_src_1500 != '' and main_is_http == false and main_is_handle == false %}
                           srcset="{% for w in wset %}{{ img_main | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}"
                           sizes="(min-width: 990px) 50vw, 100vw"
                         {% endif %}
                         style="object-position: {{ focal }};">
                  </picture>
                {% else %}
                  {{ 'lifestyle-1' | placeholder_svg_tag: 'q-placeholder' }}
                {% endif %}
                {% if has_any_media %}
                  <div class="q-overlay" style="background-color: {{ overlay_color }}; opacity: {{ overlay_op_float }};"></div>
                {% endif %}
              </div>

              <div class="q-split__content"
                   style="
                     --panel-bg: {{ s.split_panel_bg | default: 'transparent' }};
                     --panel-o: {{ s.split_panel_bg_opacity | default: 0 | divided_by: 100.0 }};
                     --panel-blur: {% if s.split_panel_blur %}blur(6px){% else %}none{% endif %};
                     --panel-r: {{ s.split_panel_radius | default: 0 }}px;
                     --panel-bw: {{ s.split_panel_border_w | default: 0 }}px;
                     --panel-bc: {{ s.split_panel_border_color | default: 'transparent' }};
                     --panel-shadow: {% if s.split_panel_shadow %}0 12px 30px rgba(0,0,0,.15){% else %}none{% endif %};
                   ">
                <div class="q-content {{ container_pad_x }}"
                     style="
                       --v-m: {{ v_m_css }}; --h-m: {{ h_m_css }};
                       --v-d: {{ v_d_css }}; --h-d: {{ h_d_css }};
                       --cta-justify: {{ cta_justify }};
                       margin-top: {{ s.margin_top | default: 0 }}px;
                       margin-bottom: {{ s.margin_bottom | default: 0 }}px;
                       padding-top: {{ s.padding_top | default: 60 }}px;
                       padding-bottom: {{ s.padding_bottom | default: 60 }}px;
                       max-width: {{ s.content_max_w | default: 'max(62ch, 48rem)' }};
                     ">
                  <div class="q-stack q-text-{{ text_align }} {% if motion_preset != 'none' %}q-anim q-anim--{{ motion_preset }}{% endif %}" style="gap: {{ s.stack_gap | default: 10 }}px;">
                    {% if b.kicker != blank %}
                      <p class="q-kicker q-type-{{ b.kicker_size | default: 'sm' }}"
                         style="color: {{ b.kicker_color | default: s.kicker_color_global | default: '#ffffff' }};">{{ b.kicker }}</p>
                    {% endif %}

                    {% if b.heading != blank %}
                      {% if forloop.first %}
                        <h1 class="q-heading q-type-{{ b.heading_size | default: s.heading_size_global | default: '5xl' }}{% if s.text_shadow %} q-text-shadow{% endif %}"
                            style="color: {{ b.heading_color | default: s.heading_color_global | default: '#ffffff' }};">{{ b.heading }}</h1>
                      {% else %}
                        <h2 class="q-heading q-type-{{ b.heading_size | default: s.heading_size_global | default: '5xl' }}{% if s.text_shadow %} q-text-shadow{% endif %}"
                            style="color: {{ b.heading_color | default: s.heading_color_global | default: '#ffffff' }};">{{ b.heading }}</h2>
                      {% endif %}
                    {% endif %}

                    {% if b.subheading != blank and b.hide_text_mobile != true %}
                      <p class="q-sub q-type-{{ b.subheading_size | default: s.subheading_size_global | default: 'lg' }}{% if s.text_shadow and s.text_shadow_sub %} q-text-shadow{% endif %}"
                         style="color: {{ b.subheading_color | default: s.subheading_color_global | default: '#ffffff' }};">{{ b.subheading }}</p>
                    {% endif %}

                    {% liquid
                      assign has_cta1 = false
                      if b.cta_text != blank and b.cta_link != blank
                        assign has_cta1 = true
                      endif
                      assign has_cta2 = false
                      if b.cta2_text != blank and b.cta2_link != blank
                        assign has_cta2 = true
                      endif
                    %}
                    {% if has_cta1 or has_cta2 %}
                      {% capture cta_classes %}q-ctas{% if b.hide_buttons_mobile %} q-ctas--hide-mobile{% endif %}{% endcapture %}
                      <div class="{{ cta_classes | strip }}" style="justify-content: var(--cta-justify);">
                        {% if has_cta1 %}
                          <a href="{{ b.cta_link }}"
                             aria-label="{{ b.cta_aria_label | default: b.cta_text | escape }}"
                             class="q-btn {% if is_outline %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ s.button_treatment | default: 'soft' }}"
                             style="
                               --btn-bg: {{ s.button_bg_color | default: '#ffffff' }};
                               --btn-fg: {{ s.button_text_color | default: '#000000' }};
                               --btn-bc: {{ s.button_border_color | default: '#ffffff' }};
                               --btn-bw: {{ s.button_border_width | default: 1 }}px;
                               --btn-r:  {{ s.button_radius | default: 6 }}px;
                               --btn-py: {{ s.button_padding_vertical | default: 12 }}px;
                               --btn-px: {{ s.button_padding_horizontal | default: 24 }}px;">{{ b.cta_text }}</a>
                        {% endif %}
                        {% if has_cta2 %}
                          <a href="{{ b.cta2_link }}"
                             aria-label="{{ b.cta2_aria_label | default: b.cta2_text | escape }}"
                             class="q-btn {% if is_outline %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ s.button_treatment | default: 'soft' }}"
                             style="
                               --btn-bg: {{ s.button_bg_color | default: '#ffffff' }};
                               --btn-fg: {{ s.button_text_color | default: '#000000' }};
                               --btn-bc: {{ s.button_border_color | default: '#ffffff' }};
                               --btn-bw: {{ s.button_border_width | default: 1 }}px;
                               --btn-r:  {{ s.button_radius | default: 6 }}px;
                               --btn-py: {{ s.button_padding_vertical | default: 12 }}px;
                               --btn-px: {{ s.button_padding_horizontal | default: 24 }}px;">{{ b.cta2_text }}</a>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
          {% else %}
            <!-- HERO layout -->
            <div class="q-bg{% if b.ken_burns and has_video == false %} q-ken-burns{% endif %}">
              {% if has_video %}
                <video class="q-video" autoplay muted loop playsinline {% if forloop.first %}preload="auto"{% else %}preload="metadata"{% endif %} poster="{{ main_src_1500 }}">
                  <source src="{{ b.background_video | escape }}" type="video/mp4">
                </video>
              {% elsif main_src_1500 != '' or mobile_src_1500 != '' %}
                {% assign wset = '600,900,1200,1500,1800,2100,2500' | split: ',' %}
                <picture>
                  {% if mobile_src_1500 != '' %}
                    {% if mob_is_http or mob_is_handle %}
                      <source media="(max-width: 767px)" srcset="{{ mobile_src_1500 }}" sizes="100vw">
                    {% else %}
                      <source media="(max-width: 767px)" srcset="{% for w in wset %}{{ img_mobile | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}" sizes="100vw">
                    {% endif %}
                  {% endif %}
                  <img class="q-img"
                       alt="{{ img_alt | escape }}"
                       {% if forloop.first %}loading="eager" fetchpriority="high"{% else %}loading="lazy" fetchpriority="auto"{% endif %}
                       decoding="async"
                       src="{{ main_src_1500 | default: mobile_src_1500 }}"
                       {% if main_src_1500 != '' and main_is_http == false and main_is_handle == false %}
                         srcset="{% for w in wset %}{{ img_main | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}"
                         sizes="100vw"
                       {% endif %}
                       style="object-position: {{ focal }};">
                </picture>
              {% else %}
                {{ 'lifestyle-1' | placeholder_svg_tag: 'q-placeholder' }}
              {% endif %}
              {% if has_any_media %}
                <div class="q-overlay" style="background-color: {{ overlay_color }}; opacity: {{ overlay_op_float }};"></div>
              {% endif %}
            </div>

            <div class="q-layer">
              <div class="q-content {{ container_pad_x }}"
                   style="
                     --v-m: {{ v_m_css }}; --h-m: {{ h_m_css }};
                     --v-d: {{ v_d_css }}; --h-d: {{ h_d_css }};
                     --cta-justify: {{ cta_justify }};
                     margin-top: {{ s.margin_top | default: 0 }}px;
                     margin-bottom: {{ s.margin_bottom | default: 0 }}px;
                     padding-top: {{ s.padding_top | default: 60 }}px;
                     padding-bottom: {{ s.padding_bottom | default: 60 }}px;
                     max-width: {{ s.content_max_w | default: 'max(62ch, 48rem)' }};
                   ">
                <div class="q-stack q-text-{{ text_align }} {% if motion_preset != 'none' %}q-anim q-anim--{{ motion_preset }}{% endif %}" style="gap: {{ s.stack_gap | default: 10 }}px;">
                  {% if b.kicker != blank %}
                    <p class="q-kicker q-type-{{ b.kicker_size | default: 'sm' }}"
                       style="color: {{ b.kicker_color | default: s.kicker_color_global | default: '#ffffff' }};">{{ b.kicker }}</p>
                  {% endif %}

                  {% if b.heading != blank %}
                    {% if forloop.first %}
                      <h1 class="q-heading q-type-{{ b.heading_size | default: s.heading_size_global | default: '5xl' }}{% if s.text_shadow %} q-text-shadow{% endif %}"
                          style="color: {{ b.heading_color | default: s.heading_color_global | default: '#ffffff' }};">{{ b.heading }}</h1>
                    {% else %}
                      <h2 class="q-heading q-type-{{ b.heading_size | default: s.heading_size_global | default: '5xl' }}{% if s.text_shadow %} q-text-shadow{% endif %}"
                          style="color: {{ b.heading_color | default: s.heading_color_global | default: '#ffffff' }};">{{ b.heading }}</h2>
                    {% endif %}
                  {% endif %}

                  {% if b.subheading != blank and b.hide_text_mobile != true %}
                    <p class="q-sub q-type-{{ b.subheading_size | default: s.subheading_size_global | default: 'lg' }}{% if s.text_shadow and s.text_shadow_sub %} q-text-shadow{% endif %}"
                       style="color: {{ b.subheading_color | default: s.subheading_color_global | default: '#ffffff' }};">{{ b.subheading }}</p>
                  {% endif %}

                  {% liquid
                    assign has_cta1 = false
                    if b.cta_text != blank and b.cta_link != blank
                      assign has_cta1 = true
                    endif
                    assign has_cta2 = false
                    if b.cta2_text != blank and b.cta2_link != blank
                      assign has_cta2 = true
                    endif
                  %}
                  {% if has_cta1 or has_cta2 %}
                    {% capture cta_classes %}q-ctas{% if b.hide_buttons_mobile %} q-ctas--hide-mobile{% endif %}{% endcapture %}
                    <div class="{{ cta_classes | strip }}" style="justify-content: var(--cta-justify);">
                      {% if has_cta1 %}
                        <a href="{{ b.cta_link }}"
                           aria-label="{{ b.cta_aria_label | default: b.cta_text | escape }}"
                           class="q-btn {% if is_outline %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ s.button_treatment | default: 'soft' }}"
                           style="
                             --btn-bg: {{ s.button_bg_color | default: '#ffffff' }};
                             --btn-fg: {{ s.button_text_color | default: '#000000' }};
                             --btn-bc: {{ s.button_border_color | default: '#ffffff' }};
                             --btn-bw: {{ s.button_border_width | default: 1 }}px;
                             --btn-r:  {{ s.button_radius | default: 6 }}px;
                             --btn-py: {{ s.button_padding_vertical | default: 12 }}px;
                             --btn-px: {{ s.button_padding_horizontal | default: 24 }}px;">{{ b.cta_text }}</a>
                      {% endif %}
                      {% if has_cta2 %}
                        <a href="{{ b.cta2_link }}"
                           aria-label="{{ b.cta2_aria_label | default: b.cta2_text | escape }}"
                           class="q-btn {% if is_outline %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ s.button_treatment | default: 'soft' }}"
                           style="
                             --btn-bg: {{ s.button_bg_color | default: '#ffffff' }};
                             --btn-fg: {{ s.button_text_color | default: '#000000' }};
                             --btn-bc: {{ s.button_border_color | default: '#ffffff' }};
                             --btn-bw: {{ s.button_border_width | default: 1 }}px;
                             --btn-r:  {{ s.button_radius | default: 6 }}px;
                             --btn-py: {{ s.button_padding_vertical | default: 12 }}px;
                             --btn-px: {{ s.button_padding_horizontal | default: 24 }}px;">{{ b.cta2_text }}</a>
                      {% endif %}
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>
          {% endif %}
        </div>
      {% endfor %}
    </div>

    {% if section.blocks.size > 1 %}
      {% if s.show_arrows %}
        <div class="q-arrows q-arrows--{{ s.arrows_theme | default: 'dark' }} q-arrows-pos--{{ s.arrows_position | default: 'centered' }} {{ container_pad_x }}">
          <button type="button" class="q-arrow" aria-label="Previous slide" data-q-carousel-prev><span aria-hidden="true">‹</span></button>
          <button type="button" class="q-arrow" aria-label="Next slide" data-q-carousel-next><span aria-hidden="true">›</span></button>
        </div>
      {% endif %}

      {% if s.show_dots %}
        <div class="q-dots q-dots-pos--{{ s.dots_position | default: 'inside' }}">
          {% for block in section.blocks %}
            <button type="button" class="q-dot" aria-label="Go to slide {{ forloop.index }}" data-q-carousel-dot data-index="{{ forloop.index0 }}"></button>
          {% endfor %}
        </div>
      {% endif %}

      {% if s.autoplay %}
        <button type="button" class="q-toggle" aria-label="Pause autoplay" data-q-carousel-toggle><span aria-hidden="true">❚❚</span></button>
      {% endif %}
    {% endif %}
  </div>

  <style>
    @media (max-width: 767px) { .q-ctas--hide-mobile { display: none; } }
  </style>
</section>

<!-- Tailwind purge safelist no longer required; min-height handled via --min-h -->

<!-- Tailwind purge safelist (only if your build purges arbitrary classes) -->
<div class="hidden">
  <div class="min-h-[60vh]"></div><div class="min-h-[75vh]"></div><div class="min-h-screen"></div>
  <div class="max-w-2xl"></div><div class="max-w-3xl"></div><div class="max-w-4xl"></div>
  <div class="text-left"></div><div class="text-center"></div><div class="text-right"></div>
</div>

{% schema %}
{
  "name": "Slideshow Banner",
  "tag": "section",
  "class": "q-carousel-hero",
  "settings": [
    { "type": "header", "content": "Layout" },
    { "type": "select", "id": "layout_mode", "label": "Layout", "default": "hero", "options": [
      { "value": "hero", "label": "Full-bleed hero" },
      { "value": "split", "label": "Split (image + content)" }
    ]},

    { "type": "header", "content": "Global placement defaults" },
    { "type": "select", "id": "default_content_position", "label": "Default placement (desktop)", "default": "center_center",
      "options": [
        { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
        { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
        { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
      ]
    },
    { "type": "select", "id": "default_content_position_mobile", "label": "Default placement (mobile)", "default": "center_center",
      "options": [
        { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
        { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
        { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
      ]
    },
    { "type": "select", "id": "default_text_alignment", "label": "Default text alignment", "default": "center",
      "options": [{ "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }]
    },
    { "type": "select", "id": "default_motion_preset", "label": "Default text animation", "default": "fade-up", "options": [
      { "value": "none", "label": "None" },
      { "value": "fade-up", "label": "Fade up" },
      { "value": "slide-up", "label": "Slide up" }
    ]},

    { "type": "header", "content": "Defaults (applied when slide fields empty)" },
    { "type": "color", "id": "overlay_color", "label": "Default overlay color", "default": "#000000" },
    { "type": "range", "id": "overlay_opacity", "label": "Default overlay opacity", "min": 0, "max": 100, "step": 5, "default": 40 },
    { "type": "select", "id": "bg_position", "label": "Default image focal point", "default": "center", "options": [
      { "value": "center", "label": "Center" },
      { "value": "top", "label": "Top" },
      { "value": "bottom", "label": "Bottom" },
      { "value": "left", "label": "Left" },
      { "value": "right", "label": "Right" },
      { "value": "top left", "label": "Top left" },
      { "value": "top right", "label": "Top right" },
      { "value": "bottom left", "label": "Bottom left" },
      { "value": "bottom right", "label": "Bottom right" }
    ]},

    { "type": "header", "content": "Behavior" },
    { "type": "checkbox", "id": "autoplay", "label": "Auto-rotate slides", "default": true },
    { "type": "range", "id": "autoplay_interval", "label": "Time between slides (seconds)", "min": 3, "max": 12, "step": 1, "default": 5 },
    { "type": "select", "id": "transition", "label": "Transition", "default": "slide", "options": [
      { "value": "slide", "label": "Slide" },
      { "value": "fade", "label": "Fade (crossfade)" }
    ]},

    { "type": "header", "content": "Arrows / Dots / Progress" },
    { "type": "checkbox", "id": "show_arrows", "label": "Show left/right arrows", "default": true },
    { "type": "select", "id": "arrows_theme", "label": "Arrow theme", "default": "dark", "options": [
      { "value": "dark", "label": "Dark (on light images)" },
      { "value": "light", "label": "Light (on dark images)" }
    ]},
    { "type": "select", "id": "arrows_position", "label": "Arrow position", "default": "centered", "options": [
      { "value": "centered", "label": "Centered vertically" },
      { "value": "edges", "label": "Near top edge" }
    ]},
    { "type": "range", "id": "arrows_size", "label": "Arrow size (px)", "min": 28, "max": 64, "step": 2, "default": 40 },
    { "type": "range", "id": "arrows_radius", "label": "Arrow radius (px)", "min": 0, "max": 40, "step": 2, "default": 40 },
    { "type": "color", "id": "arrows_bg", "label": "Arrow background", "default": "#000000" },
    { "type": "color", "id": "arrows_fg", "label": "Arrow icon color", "default": "#FFFFFF" },
    { "type": "checkbox", "id": "arrows_shadow", "label": "Arrow drop shadow", "default": false },

    { "type": "checkbox", "id": "show_dots", "label": "Show dots under the slides", "default": true },
    { "type": "select", "id": "dots_position", "label": "Dots position", "default": "inside", "options": [
      { "value": "inside", "label": "Inside banner" },
      { "value": "outside", "label": "Outside (below)" }
    ]},
    { "type": "range", "id": "dots_size", "label": "Dot size (px)", "min": 6, "max": 16, "step": 1, "default": 10 },
    { "type": "range", "id": "dots_radius", "label": "Dot radius (px)", "min": 0, "max": 12, "step": 1, "default": 12 },
    { "type": "range", "id": "dots_gap", "label": "Dot gap (px)", "min": 4, "max": 20, "step": 1, "default": 8 },
    { "type": "color", "id": "dots_color", "label": "Dot color", "default": "#999999" },
    { "type": "color", "id": "dots_active_color", "label": "Active dot color", "default": "#FFFFFF" },

    { "type": "checkbox", "id": "show_progress", "label": "Show progress bar (autoplay)", "default": false },
    { "type": "select", "id": "progress_position", "label": "Progress bar position", "default": "top", "options": [
      { "value": "top", "label": "Top" },
      { "value": "bottom", "label": "Bottom" }
    ]},
    { "type": "range", "id": "progress_height", "label": "Progress bar height (px)", "min": 2, "max": 8, "step": 1, "default": 3 },
    { "type": "range", "id": "progress_radius", "label": "Progress bar radius (px)", "min": 0, "max": 8, "step": 1, "default": 0 },
    { "type": "color", "id": "progress_color", "label": "Progress bar color", "default": "#FFFFFF" },

    { "type": "header", "content": "Layout & spacing" },
    { "type": "select", "id": "min_height", "label": "Banner height", "default": "min-h-[75vh]", "options": [
      { "value": "min-h-[60vh]", "label": "Short" },
      { "value": "min-h-[75vh]", "label": "Medium" },
      { "value": "min-h-screen", "label": "Full screen" }
    ]},
    { "type": "select", "id": "container_mode", "label": "Text container", "default": "contained", "options": [
      { "value": "contained", "label": "Contained (side padding)" },
      { "value": "full", "label": "Full-bleed (edge to edge)" }
    ]},
    { "type": "select", "id": "content_max_w", "label": "Text width (max)", "default": "max(62ch, 48rem)", "options": [
      { "value": "48rem", "label": "48rem (approx. 768px)" },
      { "value": "56rem", "label": "56rem (approx. 896px)" },
      { "value": "max(62ch, 48rem)", "label": "Comfort (recommended)" }
    ]},
    { "type": "range", "id": "padding_top", "label": "Padding top", "min": 0, "max": 240, "step": 10, "default": 60 },
    { "type": "range", "id": "padding_bottom", "label": "Padding bottom", "min": 0, "max": 240, "step": 10, "default": 60 },
    { "type": "range", "id": "margin_top", "label": "Margin top", "min": 0, "max": 120, "step": 10, "default": 0 },
    { "type": "range", "id": "margin_bottom", "label": "Margin bottom", "min": 0, "max": 120, "step": 10, "default": 0 },
    { "type": "range", "id": "stack_gap", "label": "Spacing between text and buttons (px)", "min": 0, "max": 40, "step": 2, "default": 10 },

    { "type": "header", "content": "Global text style (optional defaults)" },
    { "type": "color", "id": "kicker_color_global", "label": "Kicker color (default)", "default": "#FFFFFF" },
    { "type": "color", "id": "heading_color_global", "label": "Heading color (default)", "default": "#FFFFFF" },
    { "type": "color", "id": "subheading_color_global", "label": "Subheading color (default)", "default": "#FFFFFF" },
    { "type": "select", "id": "heading_size_global", "label": "Heading size (default)", "default": "5xl", "options": [
      { "value": "3xl", "label": "3XL" }, { "value": "4xl", "label": "4XL" }, { "value": "5xl", "label": "5XL" }, { "value": "6xl", "label": "6XL" }
    ]},
    { "type": "select", "id": "subheading_size_global", "label": "Subheading size (default)", "default": "lg", "options": [
      { "value": "base", "label": "Base" }, { "value": "lg", "label": "Large" }, { "value": "xl", "label": "XL" }
    ]},
    { "type": "checkbox", "id": "text_shadow", "label": "Add soft text shadow to headings", "default": false },
    { "type": "checkbox", "id": "text_shadow_sub", "label": "Add text shadow to subheading", "default": false },

    { "type": "header", "content": "Buttons (apply to all slides)" },
    { "type": "select", "id": "button_mode", "label": "Button base style", "options": [
      { "value": "solid", "label": "Solid" }, { "value": "outline", "label": "Outline" }], "default": "solid"
    },
    { "type": "select", "id": "button_treatment", "label": "Hover treatment", "default": "soft", "options": [
      { "value": "soft", "label": "Soft shadow" }, { "value": "hard", "label": "Hard shadow" }, { "value": "none", "label": "None" }
    ]},
    { "type": "color", "id": "button_bg_color", "label": "Button background (solid)", "default": "#FFFFFF" },
    { "type": "color", "id": "button_text_color", "label": "Button text color", "default": "#000000" },
    { "type": "color", "id": "button_border_color", "label": "Button border color (outline)", "default": "#FFFFFF" },
    { "type": "range", "id": "button_border_width", "label": "Button border width (outline)", "min": 0, "max": 10, "step": 1, "default": 1 },
    { "type": "range", "id": "button_radius", "label": "Button corner radius", "min": 0, "max": 50, "step": 2, "default": 6 },
    { "type": "range", "id": "button_padding_vertical", "label": "Button padding (top/bottom)", "min": 6, "max": 40, "step": 2, "default": 12 },
    { "type": "range", "id": "button_padding_horizontal", "label": "Button padding (left/right)", "min": 12, "max": 48, "step": 2, "default": 24 },
    { "type": "checkbox", "id": "button_uppercase", "label": "Uppercase buttons", "default": false },
    { "type": "range", "id": "button_font_weight", "label": "Button font weight", "min": 400, "max": 800, "step": 50, "default": 600 },

    { "type": "header", "content": "Split panel cosmetics" },
    { "type": "color", "id": "split_panel_bg", "label": "Panel background color", "default": "#FFFFFF" },
    { "type": "range", "id": "split_panel_bg_opacity", "label": "Panel background opacity (%)", "min": 0, "max": 100, "step": 5, "default": 0 },
    { "type": "checkbox", "id": "split_panel_blur", "label": "Backdrop blur", "default": false },
    { "type": "range", "id": "split_panel_radius", "label": "Panel radius (px)", "min": 0, "max": 40, "step": 2, "default": 0 },
    { "type": "range", "id": "split_panel_border_w", "label": "Panel border width (px)", "min": 0, "max": 6, "step": 1, "default": 0 },
    { "type": "color", "id": "split_panel_border_color", "label": "Panel border color", "default": "#000000" },
    { "type": "checkbox", "id": "split_panel_shadow", "label": "Panel shadow", "default": false },

    { "type": "header", "content": "Visibility & anchors" },
    { "type": "text", "id": "anchor_id", "label": "Optional anchor ID" },
    { "type": "text", "id": "region_label", "label": "Accessible region label", "default": "Slideshow banner" },
    { "type": "checkbox", "id": "hide_on_mobile", "label": "Hide on mobile", "default": false },
    { "type": "checkbox", "id": "hide_on_desktop", "label": "Hide on desktop", "default": false }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        { "type": "header", "content": "Background media" },
        { "type": "image_picker", "id": "background_image", "label": "Background image" },
        { "type": "image_picker", "id": "mobile_image", "label": "Mobile image (optional)", "info": "Shown on screens under 768px" },
        { "type": "text", "id": "background_video", "label": "Background video URL (MP4)", "info": "Optional; if used, provide a poster via Background image" },
        { "type": "text", "id": "image_alt", "label": "Image alt text", "info": "Describe the image; leave blank if decorative." },
        { "type": "select", "id": "bg_position", "label": "Image focal point (override)", "options": [
          { "value": "center", "label": "Center" },
          { "value": "top", "label": "Top" },
          { "value": "bottom", "label": "Bottom" },
          { "value": "left", "label": "Left" },
          { "value": "right", "label": "Right" },
          { "value": "top left", "label": "Top left" },
          { "value": "top right", "label": "Top right" },
          { "value": "bottom left", "label": "Bottom left" },
          { "value": "bottom right", "label": "Bottom right" }
        ]},

        { "type": "header", "content": "Overlay (override default)" },
        { "type": "color", "id": "overlay_color", "label": "Overlay color" },
        { "type": "range", "id": "overlay_opacity", "label": "Overlay opacity", "min": 0, "max": 100, "step": 5, "default": 40 },

        { "type": "header", "content": "Text" },
        { "type": "text", "id": "kicker", "label": "Small label (kicker)" },
        { "type": "color", "id": "kicker_color", "label": "Kicker color" },
        { "type": "select", "id": "kicker_size", "label": "Kicker size", "options": [
          { "value": "sm", "label": "Small" }, { "value": "base", "label": "Normal" }, { "value": "lg", "label": "Large" }], "default": "sm"
        },

        { "type": "text", "id": "heading", "label": "Headline" },
        { "type": "color", "id": "heading_color", "label": "Headline color" },
        { "type": "select", "id": "heading_size", "label": "Headline size", "options": [
          { "value": "3xl", "label": "3XL" }, { "value": "4xl", "label": "4XL" }, { "value": "5xl", "label": "5XL" }, { "value": "6xl", "label": "6XL" }], "default": "5xl"
        },

        { "type": "textarea", "id": "subheading", "label": "Short description" },
        { "type": "color", "id": "subheading_color", "label": "Description color" },
        { "type": "select", "id": "subheading_size", "label": "Description size", "options": [
          { "value": "base", "label": "Base" }, { "value": "lg", "label": "Large" }, { "value": "xl", "label": "XL" }], "default": "lg"
        },
        { "type": "checkbox", "id": "hide_text_mobile", "label": "Hide text on mobile", "default": false },

        { "type": "header", "content": "Buttons" },
        { "type": "select", "id": "cta_group_align", "label": "Button alignment", "default": "center", "options": [
          { "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }
        ]},
        { "type": "text", "id": "cta_text", "label": "Primary button text" },
        { "type": "url", "id": "cta_link", "label": "Primary button link" },
        { "type": "text", "id": "cta_aria_label", "label": "Primary ARIA label" },
        { "type": "text", "id": "cta2_text", "label": "Secondary button text" },
        { "type": "url", "id": "cta2_link", "label": "Secondary button link" },
        { "type": "text", "id": "cta2_aria_label", "label": "Secondary ARIA label" },
        { "type": "checkbox", "id": "hide_buttons_mobile", "label": "Hide buttons on mobile", "default": false },

        { "type": "header", "content": "Placement & Motion (overrides defaults)" },
        { "type": "select", "id": "text_alignment", "label": "Text alignment", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }
        ]},
        { "type": "select", "id": "content_position_mobile", "label": "Placement on mobile", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
          { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
          { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
        ]},
        { "type": "select", "id": "content_position", "label": "Placement on desktop", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
          { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
          { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
        ]},
        { "type": "select", "id": "motion_preset", "label": "Text animation", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "none", "label": "None" },
          { "value": "fade-up", "label": "Fade up" },
          { "value": "slide-up", "label": "Slide up" }
        ]},
        { "type": "checkbox", "id": "ken_burns", "label": "Subtle pan/zoom on image (Ken Burns)", "default": false }
      ]
    }
  ],
  "max_blocks": 8,
  "presets": [
    { "name": "Slideshow Banner", "category": "Banner",
      "blocks": [
        { "type": "slide", "settings": { "heading": "New Season Essentials", "subheading": "Fresh looks engineered for comfort.", "cta_text": "Shop Women", "cta2_text": "Shop Men" } },
        { "type": "slide", "settings": { "heading": "Members Get More", "subheading": "Exclusive drops and early access.", "cta_text": "Join Free" } }
      ]
    },
    { "name": "Slideshow Banner (Split)", "category": "Banner", "settings": { "layout_mode": "split" },
      "blocks": [
        { "type": "slide", "settings": { "heading": "Crafted Essentials", "subheading": "Image left, content right.", "cta_text": "Shop Now" } },
        { "type": "slide", "settings": { "heading": "Editorial Layout", "subheading": "Split mode for richer stories.", "cta_text": "Discover" } }
      ]
    }
  ]
}
{% endschema %}
