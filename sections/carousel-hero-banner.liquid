{% comment %}
  Quadratum — Carousel Banner
  • Theme-aware styling with up to 3 tiles
  • Product integration with quick add to cart
  • Full accessibility (ARIA, keyboard navigation)
  • Responsive design with mobile-first approach
{% endcomment %}

{%- assign s = section.settings -%}

{{ 'carousel-hero-banner.css' | asset_url | stylesheet_tag }}

{%- comment %} THEME TOKENS {% endcomment -%}
{%- assign T_font_heading = settings.font_heading -%}
{%- assign T_font_body = settings.font_body -%}
{%- assign T_head_letter = settings.headings_letterspacing | default: 0 -%}
{%- assign T_head_uppercase = settings.headings_uppercase -%}
{%- assign T_btn_variant_default = settings.button_variant_default | default: 'solid' -%}
{%- assign T_btn_radius = settings.button_radius | default: 12 -%}
{%- assign T_btn_bw = settings.button_border_width | default: 1 -%}
{%- assign T_btn_hover_op = settings.button_hover_opacity | default: 92 -%}
{%- assign T_btn_active_scale = settings.button_active_scale | default: 98 -%}

{%- assign C_primary = settings.color_primary | default: '#2563eb' -%}
{%- assign C_text_on_color = settings.text_on_color | default: '#ffffff' -%}
{%- assign C_bg_contrast = settings.bg_contrast | default: '#f6f7f8' -%}

{%- comment %} SECTION SETTINGS {% endcomment -%}
{%- assign autoplay = s.autoplay | default: true -%}
{%- assign interval = s.autoplay_interval | default: 5 -%}
{%- assign show_dots = s.show_dots | default: true -%}
{%- assign show_arrows = s.show_arrows | default: true -%}

{%- assign _btn_choice = s.button_mode | default: 'inherit' -%}
{%- if _btn_choice == 'inherit' or _btn_choice == blank -%}
  {%- assign _btn_variant = T_btn_variant_default -%}
{%- else -%}
  {%- assign _btn_variant = _btn_choice -%}
{%- endif -%}

{%- assign btn_mode_class = 'q-btn--solid' -%}
{%- if _btn_variant == 'outline' -%}{%- assign btn_mode_class = 'q-btn--outline' -%}{%- endif -%}
{%- if _btn_variant == 'ghost' -%}{%- assign btn_mode_class = 'q-btn--ghost' -%}{%- endif -%}

{%- assign min_h_mobile = s.min_height_mobile | default: '60vh' -%}
{%- assign min_h_desktop = s.min_height_desktop | default: '70vh' -%}

<style>
  /* === NEW TOKENS / OVERRIDES === */
  #{{ section.id }}{
    --q-slide-radius: {{ s.slide_radius | default: 24 }}px;
    --q-peek: clamp(24px, 6vw, 80px);
    --q-viewport-pad: clamp(12px, 4vw, 48px);
    --q-track-gap: clamp(12px, 2.5vw, 24px);
    --q-ease: cubic-bezier(0.22, 1, 0.36, 1);
  }

  #{{ section.id }} .q-heading {
    {% if T_font_heading %}font-family: {{ T_font_heading.family }}, {{ T_font_heading.fallback_families }};{% endif %}
    {% if T_head_uppercase %}text-transform: uppercase;{% endif %}
    {% if T_head_letter != 0 %}letter-spacing: {{ T_head_letter | divided_by: 1000.0 }}em;{% endif %}
  }

  /* Section-level button defaults (extended customization) */
  #{{ section.id }} .q-btn {
    --q-btn-bg: {{ s.button_bg_color | default: C_primary }};
    --q-btn-fg: {{ s.button_text_color | default: C_text_on_color }};
    --q-btn-bdr: {{ s.button_border_color | default: C_primary }};
    --q-btn-bw: {{ s.button_border_width | default: T_btn_bw }}px;
    --q-btn-br: {{ s.button_radius | default: T_btn_radius }}px;
    --q-btn-px: {{ s.button_padding_horizontal | default: 24 }}px;
    --q-btn-py: {{ s.button_padding_vertical | default: 12 }}px;
    --q-btn-hover-op: {{ T_btn_hover_op }}%;
    --q-btn-active-scale: {{ T_btn_active_scale | divided_by: 100.0 }};
    --q-btn-ls: {{ s.button_letter_spacing | default: 0 | divided_by: 1000.0 }}em;
    --q-btn-fw: {{ s.button_weight | default: 600 }};
    --q-btn-tt: {% if s.button_uppercase %}uppercase{% else %}none{% endif %};
    --q-btn-shadow:
      {% if s.button_shadow %}0 8px 24px rgba(0,0,0,.18), 0 2px 8px rgba(0,0,0,.08){% else %}none{% endif %};
    --q-btn-size:
      {% case s.button_size %}
        {% when 'sm' %}0.9375rem
        {% when 'lg' %}1.0625rem
        {% else %}1rem
      {% endcase %};
  }

  .q-carousel-banner {
    position: relative;
    overflow: hidden;
    margin-top: {{ s.margin_top | default: 0 }}px;
    margin-bottom: {{ s.margin_bottom | default: 0 }}px;
  }

  /* === Peeked, rounded card layout (neighbors visible) === */
  .q-carousel-wrapper.q-carousel-viewport{
    padding-inline: var(--q-viewport-pad);
    overflow: visible;
  }
  .q-carousel-track {
    display: flex;
    gap: var(--q-track-gap);
    transition: transform 640ms var(--q-ease);
    will-change: transform;
  }
  .q-carousel-slide {
    flex: 0 0 calc(100% - var(--q-peek));
    min-width: auto;
    position: relative;
    min-height: {{ min_h_mobile }};
    border-radius: var(--q-slide-radius);
    overflow: clip;
    box-shadow: 0 6px 24px rgba(0,0,0,.08);
    background: #fff;
  }
  @media (min-width: 768px) {
    .q-carousel-slide { min-height: {{ min_h_desktop }}; }
  }

  .q-carousel-bg { position: absolute; inset: 0; z-index: 0; overflow: hidden; }
  .q-carousel-media { width: 100%; height: 100%; object-fit: cover; display: block; }
  .q-carousel-overlay { position: absolute; inset: 0; z-index: 1; pointer-events: none; }
  .q-carousel-bg, .q-carousel-overlay { border-radius: inherit; }

  .q-carousel-content {
    position: relative;
    z-index: 2;
    min-height: inherit;
    display: flex;
    align-items: center;
    padding: {{ s.padding_top | default: 60 }}px {{ s.padding_horizontal | default: 24 }}px {{ s.padding_bottom | default: 60 }}px;
  }

  .q-carousel-inner {
    width: 100%;
    max-width: {{ s.content_max_width | default: '48rem' }};
    margin: 0 auto;
  }

  .q-kicker {
    font-size: {{ s.kicker_size | default: '0.875rem' }};
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 1rem;
  }

  .q-carousel-heading {
    font-size: {{ s.heading_size_mobile | default: '2rem' }};
    font-weight: 700;
    line-height: 1.1;
    margin-bottom: 1rem;
  }
  @media (min-width: 768px) {
    .q-carousel-heading { font-size: {{ s.heading_size_desktop | default: '3.5rem' }}; }
  }

  .q-carousel-text {
    font-size: {{ s.text_size | default: '1.125rem' }};
    line-height: 1.6;
    margin-bottom: 2rem;
  }

  /* === Button base (now with more controls) === */
  .q-carousel-actions { display:flex; flex-wrap:wrap; gap:1rem; align-items:center; }
  .q-text-left  .q-carousel-actions { justify-content:flex-start; }
  .q-text-center .q-carousel-actions { justify-content:center; } /* true center */
  .q-text-right .q-carousel-actions { justify-content:flex-end; }

  .q-btn {
    display: inline-flex; align-items:center; justify-content:center; gap:0.5rem;
    padding: var(--q-btn-py) var(--q-btn-px);
    border-radius: var(--q-btn-br);
    border: var(--q-btn-bw) solid var(--q-btn-bdr);
    background: var(--q-btn-bg); color: var(--q-btn-fg);
    font-weight: var(--q-btn-fw); letter-spacing: var(--q-btn-ls); text-transform: var(--q-btn-tt);
    box-shadow: var(--q-btn-shadow);
    transition: all 0.2s ease; cursor:pointer; font-size: var(--q-btn-size); line-height:1; white-space:nowrap;
  }
  .q-btn--solid { background: var(--q-btn-bg); color: var(--q-btn-fg); border-color: var(--q-btn-bg); }
  .q-btn--outline { background: transparent; color: var(--q-btn-bdr); border-color: var(--q-btn-bdr); }
  .q-btn--ghost { background: transparent; color: var(--q-btn-fg); border-color: transparent; }

  .q-btn:hover { opacity: var(--q-btn-hover-op); }
  .q-btn:active { transform: scale(var(--q-btn-active-scale)); }

  /* Controls */
  .q-carousel-nav {
    position: absolute; bottom: clamp(12px, 2.5vw, 20px); left:0; right:0; z-index:3;
    display:flex; justify-content:center; gap:0.5rem; padding:0 2rem;
  }
  .q-carousel-dot {
    width:12px; height:12px; border-radius:50%; background:rgba(255,255,255,.5);
    border:2px solid transparent; cursor:pointer; transition:all .3s ease; padding:0;
  }
  .q-carousel-dot[aria-current="true"] { background:#fff; transform:scale(1.2); }

  .q-carousel-arrow {
    position:absolute; top:50%; transform:translateY(-50%); z-index:3;
    background:rgba(255,255,255,.9); border:none; width:42px; height:42px; border-radius:50%;
    cursor:pointer; display:flex; align-items:center; justify-content:center; transition:all .2s ease; padding:0;
    box-shadow:0 2px 8px rgba(0,0,0,.08);
  }
  .q-carousel-arrow svg { width:22px; height:22px; stroke-width:2.25; }
  .q-carousel-arrow:hover { background:#fff; transform:translateY(-50%) scale(1.08); }
  .q-carousel-arrow--prev { left: clamp(8px, 2vw, 16px); }
  .q-carousel-arrow--next { right: clamp(8px, 2vw, 16px); }

  @media (max-width: 767px) {
    .q-carousel-arrow { width:38px; height:38px; }
    .q-carousel-arrow svg { width:20px; height:20px; }
  }

  .q-product-quick-add { display:flex; gap:.75rem; align-items:center; margin-top:1rem; }
  .q-product-price { font-size:1.5rem; font-weight:700; }
  .q-variant-selector { display:flex; gap:.5rem; flex-wrap:wrap; margin-top:.75rem; }
  .q-variant-option { padding:.5rem 1rem; border:2px solid rgba(255,255,255,.3); border-radius:.5rem; background:rgba(255,255,255,.1); color:#fff; cursor:pointer; transition:all .2s ease; }
  .q-variant-option:hover, .q-variant-option[aria-selected="true"] { background:rgba(255,255,255,.9); color:#111; border-color:#fff; }

  @media (prefers-reduced-motion: reduce) {
    .q-carousel-track { transition: none; }
    .q-btn, .q-variant-option, .q-carousel-dot, .q-carousel-arrow { transition: none; }
  }

  .q-text-left { text-align:left; }
  .q-text-center { text-align:center; }
  .q-text-right { text-align:right; }

  /* slide animations */
  .q-anim-none {}
  .q-anim-fade .q-carousel-inner { opacity:0; transform:translateY(8px); transition:all 420ms var(--q-ease); }
  .q-anim-fade.is-active .q-carousel-inner { opacity:1; transform:translateY(0); }

  .q-anim-slide .q-carousel-inner { opacity:0; transform:translateX(-16px); transition:all 420ms var(--q-ease); }
  .q-anim-slide.is-active .q-carousel-inner { opacity:1; transform:translateX(0); }

  .q-anim-zoom .q-carousel-inner { opacity:0; transform:scale(.98); transition:all 420ms var(--q-ease); transform-origin:center; }
  .q-anim-zoom.is-active .q-carousel-inner { opacity:1; transform:scale(1); }

  .q-anim-kenburns .q-carousel-media { transform:scale(1.05); }
  .q-anim-kenburns.is-active .q-carousel-media { animation:q-kenburns 6s ease-out both; }
  @keyframes q-kenburns { from{ transform:scale(1.08); } to{ transform:scale(1.0); } }
</style>

<section
  id="{{ s.anchor_id | default: section.id }}"
  class="q-carousel-banner"
  role="region"
  aria-label="{{ s.aria_label | default: 'Carousel banner' }}"
  aria-roledescription="carousel"
>
  <div class="q-carousel-wrapper q-carousel-viewport">
    <div class="q-carousel-track" data-carousel-track role="list">
      {%- for block in section.blocks limit: 3 -%}
        {%- assign b = block.settings -%}
        {%- assign text_align = b.text_alignment | default: 'center' -%}
        {%- assign anim = b.animation | default: 'fade' -%}
        <div
          class="q-carousel-slide q-anim-{{ anim }}{% if forloop.first %} is-active{% endif %}"
          data-carousel-slide
          data-slide-index="{{ forloop.index0 }}"
          data-anim="{{ anim }}"
          role="listitem"
          aria-label="Slide {{ forloop.index }} of {{ section.blocks.size }}"
          {{ block.shopify_attributes }}
        >
          <div class="q-carousel-bg" aria-hidden="true">
            {%- if b.background_image != blank -%}
              {%- assign widths = '960,1440,1920,2560' | split: ',' -%}
              <picture>
                {%- if b.mobile_image != blank -%}
                  <source media="(max-width: 767px)" srcset="{% for w in widths %}{{ b.mobile_image | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}" sizes="100vw">
                {%- endif -%}
                <img
                  class="q-carousel-media"
                  src="{{ b.background_image | image_url: width: 1920 }}"
                  srcset="{% for w in widths %}{{ b.background_image | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}"
                  sizes="100vw"
                  alt="{{ b.background_alt | default: '' | escape }}"
                  {% if forloop.first %}loading="eager" fetchpriority="high"{% else %}loading="lazy"{% endif %}
                  decoding="async"
                >
              </picture>
            {%- else -%}
              <div class="q-carousel-media" style="background: {{ b.background_color | default: C_bg_contrast }};"></div>
            {%- endif -%}

            {%- if b.overlay_type == 'gradient' -%}
              {%- assign g1 = b.grad_start | default: '#000000' -%}
              {%- assign g1o = b.grad_start_opacity | default: 40 | divided_by: 100.0 -%}
              {%- assign g2 = b.grad_end | default: '#000000' -%}
              {%- assign g2o = b.grad_end_opacity | default: 0 | divided_by: 100.0 -%}
              {%- assign ang = b.grad_angle | default: 180 -%}
              {%- assign g1c = g1 | color_modify: 'alpha', g1o -%}
              {%- assign g2c = g2 | color_modify: 'alpha', g2o -%}
              <div class="q-carousel-overlay" style="background: linear-gradient({{ ang }}deg, {{ g1c }}, {{ g2c }});"></div>
            {%- else -%}
              {%- assign oc = b.overlay_color | default: '#000000' -%}
              {%- assign oo = b.overlay_opacity | default: 40 | divided_by: 100.0 -%}
              <div class="q-carousel-overlay" style="background-color: {{ oc }}; opacity: {{ oo }};"></div>
            {%- endif -%}
          </div>

          <div class="q-carousel-content">
            <div class="q-carousel-inner q-text-{{ text_align }}">
              {%- if b.kicker != blank -%}
                <div class="q-kicker" style="color: {{ b.kicker_color | default: C_text_on_color }};">{{ b.kicker }}</div>
              {%- endif -%}
              {%- if b.heading != blank -%}
                <h2 class="q-carousel-heading q-heading" style="color: {{ b.heading_color | default: C_text_on_color }};">{{ b.heading }}</h2>
              {%- endif -%}
              {%- if b.paragraph != blank -%}
                <div class="q-carousel-text" style="color: {{ b.text_color | default: C_text_on_color }};">{{ b.paragraph }}</div>
              {%- endif -%}

              {%- if b.product != blank -%}
                {%- assign product = b.product -%}
                <div class="q-product-quick-add">
                  <div class="q-product-price" style="color: {{ b.heading_color | default: C_text_on_color }};">{{ product.price | money }}</div>
                </div>
                {%- if product.has_only_default_variant == false -%}
                  <div class="q-variant-selector" role="radiogroup" aria-label="Select variant">
                    {%- for variant in product.variants limit: 5 -%}
                      <button type="button" class="q-variant-option" data-variant-id="{{ variant.id }}" role="radio" aria-checked="{% if forloop.first %}true{% else %}false{% endif %}" {% if forloop.first %}aria-selected="true"{% endif %}>{{ variant.title }}</button>
                    {%- endfor -%}
                  </div>
                {%- endif -%}
              {%- endif -%}

              <div class="q-carousel-actions">
                {%- if b.product != blank -%}
                  <form method="post" action="/cart/add" class="q-add-to-cart-form">
                    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" data-variant-input>
                    <button type="submit" class="q-btn {{ btn_mode_class }}" {% unless product.available %}disabled{% endunless %}>
                      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><path d="M2.5 3.33h2.083l2.5 10.834h8.334l2.083-7.5H5.833"/><circle cx="8.333" cy="17.5" r="0.833" fill="currentColor"/><circle cx="15" cy="17.5" r="0.833" fill="currentColor"/></svg>
                      {{ b.cta_text | default: 'Add to Cart' }}
                    </button>
                  </form>
                {%- elsif b.cta_text != blank -%}
                  <a href="{{ b.cta_link | default: '#' }}" class="q-btn {{ btn_mode_class }}" aria-label="{{ b.cta_aria_label | default: b.cta_text | escape }}">{{ b.cta_text }}</a>
                {%- endif -%}

                {%- if b.cta2_text != blank -%}
                  <a href="{{ b.cta2_link | default: '#' }}" class="q-btn {{ btn_mode_class }}" aria-label="{{ b.cta2_aria_label | default: b.cta2_text | escape }}">{{ b.cta2_text }}</a>
                {%- endif -%}
              </div>
            </div>
          </div>
        </div>
      {%- endfor -%}
    </div>

    {%- if section.blocks.size > 1 -%}
      {%- if show_arrows -%}
        <button class="q-carousel-arrow q-carousel-arrow--prev" data-carousel-prev aria-label="Previous slide" type="button">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><path d="M15 18l-6-6 6-6"/></svg>
        </button>
        <button class="q-carousel-arrow q-carousel-arrow--next" data-carousel-next aria-label="Next slide" type="button">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><path d="M9 18l6-6-6-6"/></svg>
        </button>
      {%- endif -%}

      {%- if show_dots -%}
        <div class="q-carousel-nav" role="tablist" aria-label="Slide navigation">
          {%- for block in section.blocks -%}
            <button class="q-carousel-dot" data-carousel-dot data-index="{{ forloop.index0 }}" role="tab" aria-label="Go to slide {{ forloop.index }}" {% if forloop.first %}aria-current="true"{% endif %} type="button"></button>
          {%- endfor -%}
        </div>
      {%- endif -%}
    {%- endif -%}
  </div>
</section>

<script>
(function() {
  function initCarousel(section) {
    const wrapper = section.querySelector('.q-carousel-viewport');
    const track = section.querySelector('[data-carousel-track]');
    const originalSlides = Array.from(section.querySelectorAll('[data-carousel-slide]'));
    const dots = Array.from(section.querySelectorAll('[data-carousel-dot]'));
    const prevBtn = section.querySelector('[data-carousel-prev]');
    const nextBtn = section.querySelector('[data-carousel-next]');

    if (!track || originalSlides.length <= 1) return;

    const autoplay = {{ autoplay | json }};
    const interval = {{ interval | times: 1000 }};
    let autoplayTimer = null;

    /* --------- Build infinite ring: [cloneLast] [real...real] [cloneFirst] --------- */
    const firstClone = originalSlides[0].cloneNode(true);
    const lastClone  = originalSlides[originalSlides.length - 1].cloneNode(true);
    firstClone.classList.add('is-clone');
    lastClone.classList.add('is-clone');

    // Accessibility: clones shouldn't be announced as extra items
    [firstClone, lastClone].forEach(clone => {
      clone.setAttribute('aria-hidden', 'true');
      clone.removeAttribute('id');
    });

    track.appendChild(firstClone);
    track.insertBefore(lastClone, originalSlides[0]);

    // After DOM mutation, reselect slides list
    let slides = Array.from(track.querySelectorAll('[data-carousel-slide]'));

    // Desired initial: center the 1st real slide, with last on left and 2nd on right
    let currentIndex = 1; // because index 0 is [cloneLast], 1 is first real

    /* ------------------- Helpers ------------------- */
    const rebindVariantAndForms = () => {
      // rebind variant buttons in (cloned) slides
      section.querySelectorAll('.q-variant-option').forEach(btn => {
        btn.addEventListener('click', function() {
          const form = this.closest('.q-carousel-slide')?.querySelector('.q-add-to-cart-form');
          const input = form?.querySelector('[data-variant-input]');
          if (!input) return;
          input.value = this.dataset.variantId;

          this.closest('.q-variant-selector')?.querySelectorAll('.q-variant-option').forEach(b => {
            b.setAttribute('aria-selected', 'false');
            b.setAttribute('aria-checked', 'false');
          });
          this.setAttribute('aria-selected', 'true');
          this.setAttribute('aria-checked', 'true');
        }, { once: false });
      });

      section.querySelectorAll('.q-add-to-cart-form').forEach(form => {
        // avoid double-binding
        if (form.__qBound) return;
        form.__qBound = true;

        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          const formData = new FormData(this);
          const btn = this.querySelector('button[type="submit"]');
          const originalText = btn.innerHTML;
          btn.disabled = true;
          btn.innerHTML = 'Adding...';
          try {
            const response = await fetch('/cart/add.js', { method: 'POST', body: formData });
            if (response.ok) {
              btn.innerHTML = '✓ Added!';
              setTimeout(() => { btn.innerHTML = originalText; btn.disabled = false; }, 2000);
              document.documentElement.dispatchEvent(new CustomEvent('cart:refresh'));
            } else { throw new Error('Failed to add to cart'); }
          } catch(e2) {
            btn.innerHTML = 'Error';
            setTimeout(() => { btn.innerHTML = originalText; btn.disabled = false; }, 2000);
          }
        });
      });
    };

    function realCount() { return originalSlides.length; }
    function toRealIndex(idx) {
      // map [0..(n+1)] => [0..n-1]
      return ((idx - 1) % realCount() + realCount()) % realCount();
    }

    function centerFor(index) {
      const target = slides[index];
      const wrapperWidth = wrapper.clientWidth;
      const slideWidth = target.clientWidth;
      const slideLeft = target.offsetLeft;
      const align = slideLeft - (wrapperWidth - slideWidth) / 2;
      return Math.max(0, align);
    }

    function applyActiveState() {
      const realIdx = toRealIndex(currentIndex);
      slides.forEach((slide, i) => {
        slide.classList.toggle('is-active', i === currentIndex);
        slide.setAttribute('aria-hidden', i === currentIndex ? 'false' : 'true');
      });
      dots.forEach((dot, i) => {
        if (i === realIdx) {
          dot.setAttribute('aria-current', 'true');
          dot.setAttribute('aria-selected', 'true');
        } else {
          dot.removeAttribute('aria-current');
          dot.setAttribute('aria-selected', 'false');
        }
      });
    }

    function translateTo(index, withTransition = true) {
      const offset = centerFor(index);
      if (!withTransition) {
        const prev = track.style.transition;
        track.style.transition = 'none';
        track.style.transform = 'translateX(' + (-offset) + 'px)';
        void track.offsetHeight; // reflow
        track.style.transition = prev || '';
      } else {
        track.style.transform = 'translateX(' + (-offset) + 'px)';
      }
    }

    function goTo(index, withTransition = true) {
      currentIndex = index;
      translateTo(currentIndex, withTransition);
      applyActiveState();
    }

    function next() { goTo(currentIndex + 1); }
    function prev() { goTo(currentIndex - 1); }

    // when we land on a clone, snap to the corresponding real slide without transition
    track.addEventListener('transitionend', () => {
      const n = slides.length;
      if (currentIndex === n - 1) {
        // at [cloneFirst] -> snap to first real (index 1)
        currentIndex = 1;
        translateTo(currentIndex, false);
        applyActiveState();
      } else if (currentIndex === 0) {
        // at [cloneLast] -> snap to last real (index n-2)
        currentIndex = n - 2;
        translateTo(currentIndex, false);
        applyActiveState();
      }
    });

    function startAutoplay() {
      if (!autoplay || realCount() <= 1) return;
      stopAutoplay();
      autoplayTimer = setInterval(next, interval);
    }
    function stopAutoplay() {
      if (autoplayTimer) { clearInterval(autoplayTimer); autoplayTimer = null; }
    }

    // events
    if (prevBtn) prevBtn.addEventListener('click', () => { stopAutoplay(); prev(); });
    if (nextBtn) nextBtn.addEventListener('click', () => { stopAutoplay(); next(); });

    dots.forEach((dot, i) => {
      dot.addEventListener('click', () => {
        stopAutoplay();
        // dots map to real slides -> overall index = 1 + realIndex
        goTo(1 + i);
      });
    });

    section.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') { stopAutoplay(); prev(); }
      else if (e.key === 'ArrowRight') { stopAutoplay(); next(); }
    });

    section.addEventListener('mouseenter', stopAutoplay);
    section.addEventListener('focusin', stopAutoplay);
    section.addEventListener('mouseleave', startAutoplay);
    section.addEventListener('focusout', startAutoplay);

    // resize: keep centered without a jump
    let resizeRaf = null;
    function onResize() {
      if (resizeRaf) cancelAnimationFrame(resizeRaf);
      resizeRaf = requestAnimationFrame(() => translateTo(currentIndex, false));
    }
    window.addEventListener('resize', onResize);

    // bind actions inside (cloned) slides too
    rebindVariantAndForms();

    // init: center first real slide, show neighbors (last on left, second on right)
    translateTo(currentIndex, false);
    applyActiveState();
    startAutoplay();
  }

  function init() {
    document.querySelectorAll('.q-carousel-banner').forEach(initCarousel);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  document.addEventListener('shopify:section:load', (e) => {
    const section = e.target.querySelector('.q-carousel-banner') || e.target;
    if (section.classList.contains('q-carousel-banner')) {
      initCarousel(section);
    }
  });
})();
</script>

{% schema %}
{
  "name": "Carousel Banner",
  "tag": "section",
  "class": "q-carousel-banner-section",
  "max_blocks": 3,
  "settings": [
    { "type": "header", "content": "Layout" },
    { "type": "text", "id": "aria_label", "label": "ARIA label", "default": "Carousel banner" },
    {
      "type": "select",
      "id": "min_height_mobile",
      "label": "Minimum height (mobile)",
      "default": "60vh",
      "options": [
        { "value": "50vh", "label": "50vh" },
        { "value": "60vh", "label": "60vh" },
        { "value": "70vh", "label": "70vh" },
        { "value": "80vh", "label": "80vh" },
        { "value": "100vh", "label": "Full screen" }
      ]
    },
    {
      "type": "select",
      "id": "min_height_desktop",
      "label": "Minimum height (desktop)",
      "default": "70vh",
      "options": [
        { "value": "50vh", "label": "50vh" },
        { "value": "60vh", "label": "60vh" },
        { "value": "70vh", "label": "70vh" },
        { "value": "80vh", "label": "80vh" },
        { "value": "100vh", "label": "Full screen" }
      ]
    },
    { "type": "text", "id": "content_max_width", "label": "Content max width", "default": "48rem" },
    { "type": "range", "id": "padding_top", "label": "Padding top", "min": 0, "max": 200, "step": 10, "default": 60, "unit": "px" },
    { "type": "range", "id": "padding_horizontal", "label": "Padding horizontal", "min": 16, "max": 80, "step": 4, "default": 24, "unit": "px" },
    { "type": "range", "id": "margin_top", "label": "Margin top", "min": 0, "max": 100, "step": 10, "default": 0, "unit": "px" },
    { "type": "range", "id": "margin_bottom", "label": "Margin bottom", "min": 0, "max": 100, "step": 10, "default": 0, "unit": "px" },

    { "type": "range", "id": "slide_radius", "label": "Slide corner radius", "min": 0, "max": 40, "step": 2, "default": 24, "unit": "px" },

    { "type": "header", "content": "Carousel Settings" },
    { "type": "checkbox", "id": "autoplay", "label": "Auto-rotate slides", "default": true },
    { "type": "range", "id": "autoplay_interval", "label": "Time between slides", "min": 3, "max": 12, "step": 1, "default": 5, "unit": "s" },
    { "type": "checkbox", "id": "show_dots", "label": "Show dot navigation", "default": true },
    { "type": "checkbox", "id": "show_arrows", "label": "Show arrow navigation", "default": true },

    { "type": "header", "content": "Typography" },
    { "type": "text", "id": "kicker_size", "label": "Kicker size", "default": "0.875rem" },
    { "type": "text", "id": "heading_size_mobile", "label": "Heading size (mobile)", "default": "2rem" },
    { "type": "text", "id": "heading_size_desktop", "label": "Heading size (desktop)", "default": "3.5rem" },
    { "type": "text", "id": "text_size", "label": "Paragraph text size", "default": "1.125rem" },

    { "type": "header", "content": "Button Styling" },
    {
      "type": "select",
      "id": "button_mode",
      "label": "Button style",
      "default": "inherit",
      "options": [
        { "value": "inherit", "label": "Inherit from theme" },
        { "value": "solid", "label": "Solid" },
        { "value": "outline", "label": "Outline" },
        { "value": "ghost", "label": "Ghost" }
      ]
    },
    { "type": "color", "id": "button_bg_color", "label": "Button background", "default": "#2563eb" },
    { "type": "color", "id": "button_text_color", "label": "Button text color", "default": "#ffffff" },
    { "type": "color", "id": "button_border_color", "label": "Button border color", "default": "#2563eb" },
    { "type": "range", "id": "button_border_width", "label": "Button border width", "min": 0, "max": 6, "step": 1, "default": 1, "unit": "px" },
    { "type": "range", "id": "button_radius", "label": "Button border radius", "min": 0, "max": 50, "step": 1, "default": 12, "unit": "px" },
    { "type": "range", "id": "button_padding_vertical", "label": "Button padding (vertical)", "min": 6, "max": 24, "step": 1, "default": 12, "unit": "px" },
    { "type": "range", "id": "button_padding_horizontal", "label": "Button padding (horizontal)", "min": 12, "max": 48, "step": 2, "default": 24, "unit": "px" },

    { "type": "checkbox", "id": "button_uppercase", "label": "Uppercase button text", "default": false },
    { "type": "range", "id": "button_weight", "label": "Button font weight", "min": 400, "max": 800, "step": 50, "default": 600 },
    { "type": "range", "id": "button_letter_spacing", "label": "Button letter spacing (1/1000 em)", "min": 0, "max": 50, "step": 1, "default": 0 },
    { "type": "checkbox", "id": "button_shadow", "label": "Button shadow", "default": false },
    {
      "type": "select",
      "id": "button_size",
      "label": "Button size",
      "default": "md",
      "options": [
        { "value": "sm", "label": "Small" },
        { "value": "md", "label": "Medium" },
        { "value": "lg", "label": "Large" }
      ]
    },

    { "type": "header", "content": "Visibility" },
    { "type": "text", "id": "anchor_id", "label": "Section anchor ID (optional)" }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Carousel Slide",
      "settings": [
        { "type": "header", "content": "Background" },
        { "type": "image_picker", "id": "background_image", "label": "Background image" },
        { "type": "image_picker", "id": "mobile_image", "label": "Mobile background (optional)" },
        { "type": "text", "id": "background_alt", "label": "Image alt text" },
        { "type": "color", "id": "background_color", "label": "Background color (fallback)", "default": "#f6f7f8" },

        { "type": "header", "content": "Overlay" },
        {
          "type": "select",
          "id": "overlay_type",
          "label": "Overlay type",
          "default": "solid",
          "options": [
            { "value": "solid", "label": "Solid color" },
            { "value": "gradient", "label": "Gradient" }
          ]
        },
        { "type": "color", "id": "overlay_color", "label": "Overlay color (solid)", "default": "#000000" },
        { "type": "range", "id": "overlay_opacity", "label": "Overlay opacity", "min": 0, "max": 100, "step": 5, "default": 40, "unit": "%" },
        { "type": "color", "id": "grad_start", "label": "Gradient start color", "default": "#000000" },
        { "type": "range", "id": "grad_start_opacity", "label": "Start opacity", "min": 0, "max": 100, "step": 5, "default": 40, "unit": "%" },
        { "type": "color", "id": "grad_end", "label": "Gradient end color", "default": "#000000" },
        { "type": "range", "id": "grad_end_opacity", "label": "End opacity", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "%" },
        { "type": "range", "id": "grad_angle", "label": "Gradient angle", "min": 0, "max": 360, "step": 15, "default": 180, "unit": "deg" },

        { "type": "header", "content": "Content" },
        { "type": "text", "id": "kicker", "label": "Kicker / eyebrow text", "default": "New Collection" },
        { "type": "color", "id": "kicker_color", "label": "Kicker color", "default": "#ffffff" },
        { "type": "text", "id": "heading", "label": "Heading", "default": "Get the skin you want to feel" },
        { "type": "color", "id": "heading_color", "label": "Heading color", "default": "#ffffff" },
        { "type": "textarea", "id": "paragraph", "label": "Paragraph text", "default": "Discover premium products designed to make you feel confident and beautiful." },
        { "type": "color", "id": "text_color", "label": "Text color", "default": "#ffffff" },
        {
          "type": "select",
          "id": "text_alignment",
          "label": "Text alignment",
          "default": "center",
          "options": [
            { "value": "left", "label": "Left" },
            { "value": "center", "label": "Center" },
            { "value": "right", "label": "Right" }
          ]
        },

        { "type": "header", "content": "Product Integration" },
        { "type": "product", "id": "product", "label": "Featured product (optional)" },

        { "type": "header", "content": "Call to Action" },
        { "type": "text", "id": "cta_text", "label": "Primary CTA text", "default": "Shop Now" },
        { "type": "url", "id": "cta_link", "label": "Primary CTA link" },
        { "type": "text", "id": "cta_aria_label", "label": "Primary CTA aria-label (accessibility)" },
        { "type": "text", "id": "cta2_text", "label": "Secondary CTA text" },
        { "type": "url", "id": "cta2_link", "label": "Secondary CTA link" },
        { "type": "text", "id": "cta2_aria_label", "label": "Secondary CTA aria-label" },

        { "type": "select", "id": "animation", "label": "Slide animation", "default": "fade",
          "options": [
            { "value": "none", "label": "None" },
            { "value": "fade", "label": "Fade" },
            { "value": "slide", "label": "Slide" },
            { "value": "zoom", "label": "Zoom" },
            { "value": "kenburns", "label": "Ken Burns (bg image)" }
          ]
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Carousel Hero Banner",
      "category": "Hero Banners",
      "blocks": [
        { "type": "slide", "settings": { "kicker": "Blend beauty in you", "heading": "Get the skin you want to feel", "paragraph": "Discover premium products designed for your unique beauty.", "cta_text": "Shop Now" } },
        { "type": "slide", "settings": { "kicker": "New Arrivals", "heading": "Fresh looks for every season", "paragraph": "Explore our latest collection of curated essentials.", "cta_text": "Explore Collection" } },
        { "type": "slide", "settings": { "kicker": "Limited Time", "heading": "Special offer inside", "paragraph": "Don't miss out on our exclusive deals and bundles.", "cta_text": "View Deals" } }
      ]
    }
  ]
}
{% endschema %}
