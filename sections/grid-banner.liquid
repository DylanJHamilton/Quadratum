{% comment %}
  Quadratum • Hero + Grid Banner
  Modes: hero_only / grid_only / hero_plus_grid
  - True hero (single canvas) + optional magazine grid
  - Fonts/colors/containers inherit from Theme Settings with section overrides
  - YouTube OR MP4 backgrounds for hero and tiles
  - No logic inside {{ }}, no chained assigns; only {% liquid %}/{% if %}
{% endcomment %}

{% assign s = section.settings %}

{%- comment -%} Visibility toggles {%- endcomment -%}
{% assign visibility_classes = '' %}
{% if s.hide_on_mobile %}{% assign visibility_classes = visibility_classes | append: ' hidden md:block' %}{% endif %}
{% if s.hide_on_desktop %}{% assign visibility_classes = visibility_classes | append: ' md:hidden' %}{% endif %}

{%- comment -%} Scoped section id {%- endcomment -%}
{%- assign sid = s.anchor_id | default: 'section-' | append: section.id -%}

{%- comment -%} Container classes (side padding retained) {%- endcomment -%}
{% assign container_pad = '' %}
{% if s.container_mode == 'contained' %}{% assign container_pad = 'px-4 md:px-6' %}{% endif %}
{% assign container_class = '' %}
{% if s.container_mode == 'full' %}
  {% assign container_class = container_pad %}
{% else %}
  {% assign container_class = 'mx-auto max-w-screen-xl ' | append: container_pad %}
{% endif %}

{%- comment -%} Spacing map (purge-proof) {%- endcomment -%}
{% assign pad_mobile = 64 %}{% assign pad_desktop = 96 %}
{% case s.pad_y %}
  {% when 'py-8 md:py-12' %}{% assign pad_mobile = 32 %}{% assign pad_desktop = 48 %}
  {% when 'py-12 md:py-16' %}{% assign pad_mobile = 48 %}{% assign pad_desktop = 64 %}
  {% when 'py-16 md:py-24' %}{% assign pad_mobile = 64 %}{% assign pad_desktop = 96 %}
{% endcase %}

{%- comment -%} Grid gaps {%- endcomment -%}
{% assign gap_m = 16 %}{% assign gap_t = 24 %}{% assign gap_d = 32 %}
{% case s.gap %}
  {% when 'gap-3 md:gap-4' %}{% assign gap_m = 12 %}{% assign gap_t = 16 %}{% assign gap_d = 16 %}
  {% when 'gap-4 md:gap-6' %}{% assign gap_m = 16 %}{% assign gap_t = 24 %}{% assign gap_d = 24 %}
  {% when 'gap-6 md:gap-8' %}{% assign gap_m = 24 %}{% assign gap_t = 32 %}{% assign gap_d = 32 %}
{% endcase %}

{%- comment -%} Grid cols + row heights {%- endcomment -%}
{% assign cols_m = s.cols_mobile | default: '2' %}
{% assign cols_t = s.cols_tablet | default: '6' %}
{% assign cols_d = s.cols_desktop | default: '12' %}
{% assign row_m  = s.row_h_mobile  | default: 160 %}
{% assign row_t  = s.row_h_tablet  | default: 200 %}
{% assign row_d  = s.row_h_desktop | default: 240 %}

{%- comment -%} Hero↔Grid stack gap (px) {%- endcomment -%}
{% assign stack_gap_px = s.stack_gap | default: 56 %}

<section
  id="{{ sid }}"
  class="relative {{ s.pad_y | default: 'py-16 md:py-24' }}{{ visibility_classes }}"
  role="region"
  aria-label="{{ s.region_label | default: 'Promotional hero and grid' }}"
>

<style>
/* ===== Hero + Grid Banner — CSS (scoped) ===== */

/* Section spacing (purge-proof) */
#{{ sid }}{padding-top:{{ pad_mobile }}px;padding-bottom:{{ pad_mobile }}px;}
@media (min-width:768px){#{{ sid }}{padding-top:{{ pad_desktop }}px;padding-bottom:{{ pad_desktop }}px;}}

/* Side padding fallbacks */
#{{ sid }} .px-4{padding-left:16px;padding-right:16px;}
@media (min-width:768px){#{{ sid }} .md\:px-6{padding-left:24px;padding-right:24px;}}

/* Container width from Theme Settings */
#{{ sid }} .max-w-screen-xl{max-width: {{ settings.container_lg | default: 1152 }}px;}

/* Hard center: always center canvases to Theme container width */
#{{ sid }} .q-cw{max-width: {{ settings.container_lg | default: 1152 }}px;margin-left:auto;margin-right:auto;width:100%;}

/* Typography tokens from Theme Settings */
#{{ sid }}{
  --q-font-head: {{ settings.font_heading.family | json }}, {{ settings.font_heading.fallback_families | json }};
  --q-font-body: {{ settings.font_body.family  | json }}, {{ settings.font_body.fallback_families  | json }};
  -webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale; text-rendering:optimizeLegibility; font-synthesis-weight:none;
}
#{{ sid }} h1,#{{ sid }} h2,#{{ sid }} h3{
  font-family:var(--q-font-head);
  font-weight:800;
  line-height:1.1;
  letter-spacing: {{ settings.headings_letterspacing | default: 0 | divided_by: 1000.0 }}em;
  text-transform: {% if settings.headings_uppercase %}uppercase{% else %}none{% endif %};
}
#{{ sid }} p,#{{ sid }} a,#{{ sid }} span{font-family:var(--q-font-body);line-height: {{ settings.body_line_height | default: 160 | divided_by: 100.0 }};}

/* Hero */
#{{ sid }} .q-hero{position:relative;overflow:hidden;border-radius:16px;}
#{{ sid }} .q-hero-card{position:relative;z-index:1;height:100%;display:flex;width:100%;}
#{{ sid }} .q-hero-inner{width:100%;max-width:64rem;margin:0 auto;}
#{{ sid }} .q-hero h2{font-size:clamp(2.4rem,6vw,5rem);letter-spacing:-.02em;}
#{{ sid }} .q-hero .sub{font-size:clamp(1.0625rem,1.5vw,1.25rem);opacity:.95;}

/* Background media wrapper */
#{{ sid }} .q-hero-media,
#{{ sid }} .q-media{position:absolute;inset:0;z-index:0;overflow:hidden;}
#{{ sid }} .q-hero-media img,#{{ sid }} .q-hero-media video,#{{ sid }} .q-media img,#{{ sid }} .q-media video{width:100%;height:100%;object-fit:cover;display:block;transform:scale(1.01);transition:transform .6s ease;}
#{{ sid }} .q-hero:hover .q-hero-media img,#{{ sid }} .q-hero:hover .q-hero-media video{transform:scale(1.05);}
#{{ sid }} .q-yt,
#{{ sid }} .q-yt iframe{position:absolute;inset:0;width:100%;height:100%;border:0;}

/* Optional readable pills (off by default) */
{% if s.enable_text_pills %}
#{{ sid }} .q-hero h2,#{{ sid }} .q-hero .sub{display:inline;box-decoration-break:clone;background:rgba(0,0,0,.38);color:#fff;padding:.15em .4em;border-radius:.35em;}
#{{ sid }} .q-hero-inner > *:first-child{display:inline-block;background:rgba(0,0,0,.35);backdrop-filter:saturate(120%) blur(2px);border-radius:12px;padding:.6rem .85rem;}
{% endif %}
{% if s.enable_tile_text_pills %}
#{{ sid }} .q-inner > *:first-child{display:inline-block;background:rgba(0,0,0,.35);backdrop-filter:saturate(120%) blur(2px);border-radius:12px;padding:.6rem .85rem;}
{% endif %}

/* CTA buttons — inherit Theme Settings */
#{{ sid }} a.q-btn{
  position:relative;display:inline-flex;align-items:center;justify-content:center;gap:.6rem;
  padding:.9rem 1.4rem;font-weight:700;line-height:1.2;border-radius:{{ s.button_radius | default: settings.button_radius }}px !important;
  text-decoration:none;cursor:pointer;border:0 !important;box-shadow:none !important;-webkit-appearance:none;appearance:none;
  text-transform:{% if settings.buttons_uppercase %}uppercase{% else %}none{% endif %};
}
#{{ sid }} a.q-btn:hover{opacity: {{ settings.button_hover_opacity | default: 92 | divided_by: 100.0 }};}
#{{ sid }} a.q-btn:active{transform: scale({{ settings.button_active_scale | default: 98 | divided_by: 100.0 }});}
#{{ sid }} a.q-btn.q-btn--solid{background:{{ s.button_bg_color | default: settings.color_primary }} !important;color:{{ s.button_text_color | default: settings.text_on_color }} !important;}
#{{ sid }} a.q-btn.q-btn--outline{
  color:{{ s.button_text_color | default: settings.text_on_color }} !important;
  border:{{ s.button_border_width | default: settings.button_border_width }}px solid {{ s.button_border_color | default: settings.text_on_color }} !important;
  background:rgba(0,0,0,.18);backdrop-filter:saturate(130%) blur(1px);
}

/* CTA row: keep on one line except on small screens */
#{{ sid }} .q-cta{display:flex;width:100%;row-gap:.8rem;column-gap:1rem;flex-wrap:nowrap}
#{{ sid }} .q-cta .q-btn{white-space:nowrap;min-width:0;flex:0 1 auto}
@media (max-width:640px){#{{ sid }} .q-cta{flex-wrap:wrap}}

/* Grid */
#{{ sid }} .q-grid{
  display:grid !important;border-radius:12px;width:100%;
  grid-auto-flow:dense;
  grid-template-columns:repeat(var(--cols-m,2), minmax(0,1fr)) !important;
  grid-auto-rows:var(--row-m,160px) !important;
  gap:var(--gap-m,16px) !important;
}
#{{ sid }} .q-item{position:relative;display:flex;min-height:0;overflow:hidden;border-radius:12px;}
#{{ sid }} .q-card{position:relative;z-index:1;width:100%;height:100%;display:flex;min-width:0;}
#{{ sid }} .q-inner{width:100%;max-width:56rem;margin:0 auto;}
#{{ sid }} .q-gradient{position:absolute;inset:auto 0 0 0;height:min(26%,180px);z-index:0;pointer-events:none;}

#{{ sid }} .q-grid > .q-item{grid-column:span var(--cspan-m,1) !important;grid-row:span var(--rspan-m,1) !important;}

@media (min-width:640px){
  #{{ sid }} .q-grid{grid-template-columns:repeat(var(--cols-t,6), minmax(0,1fr)) !important;grid-auto-rows:var(--row-t,200px) !important;gap:var(--gap-t,24px) !important;}
  #{{ sid }} .q-grid > .q-item{grid-column:span var(--cspan-t,2) !important;grid-row:span var(--rspan-t,1) !important;}
}
@media (min-width:1024px){
  #{{ sid }} .q-grid{grid-template-columns:repeat(var(--cols-d,12), minmax(0,1fr)) !important;grid-auto-rows:var(--row-d,240px) !important;gap:var(--gap-d,32px) !important;}
  #{{ sid }} .q-grid > .q-item{grid-column:span var(--cspan-d,3) !important;grid-row:span var(--rspan-d,1) !important;}
}
</style>

{%- comment -%} Optional heading block {%- endcomment -%}
{% if s.kicker != blank or s.heading != blank or s.subheading != blank %}
  <div class="{{ container_class }} q-cw mb-8 md:mb-10">
    {% if s.kicker != blank %}<p class="text-sm font-semibold tracking-wide uppercase text-neutral-500">{{ s.kicker }}</p>{% endif %}
    {% if s.heading != blank %}<h2 class="mt-2 text-3xl md:text-5xl">{{ s.heading | escape }}</h2>{% endif %}
    {% if s.subheading != blank %}<p class="mt-3 text-base md:text-lg text-neutral-600">{{ s.subheading }}</p>{% endif %}
  </div>
{% endif %}

{%- comment -%} ============ HERO ============ {%- endcomment -%}
{% if s.layout_mode == 'hero_only' or s.layout_mode == 'hero_plus_grid' %}
  {% liquid
    assign hero_has_media = false
    if s.hero_video != blank or s.hero_image != blank or s.hero_mobile_image != blank
      assign hero_has_media = true
    endif

    assign hero_ov_color = s.hero_overlay_color | default: '#000000'
    assign hero_ov_opacity = s.hero_overlay_opacity | default: 45 | plus: 0

    assign hero_tone = s.hero_text_tone | default: 'auto'
    assign hero_txt  = settings.text_on_color
    if hero_tone == 'dark'
      assign hero_txt = settings.text_base
    elsif hero_tone == 'light'
      assign hero_txt = settings.text_on_color
    elsif hero_tone == 'auto'
      if hero_ov_opacity < 45
        assign hero_txt = settings.text_base
      endif
    endif

    assign h_ai = 'center'
    assign h_jc = 'center'
    assign h_ta = 'center'
    case s.hero_content_position
      when 'top-left'
        assign h_ai = 'flex-start'
        assign h_jc = 'flex-start'
        assign h_ta = 'left'
      when 'top-right'
        assign h_ai = 'flex-start'
        assign h_jc = 'flex-end'
        assign h_ta = 'right'
      when 'bottom-left'
        assign h_ai = 'flex-end'
        assign h_jc = 'flex-start'
        assign h_ta = 'left'
      when 'bottom-right'
        assign h_ai = 'flex-end'
        assign h_jc = 'flex-end'
        assign h_ta = 'right'
      when 'left'
        assign h_ai = 'center'
        assign h_jc = 'flex-start'
        assign h_ta = 'left'
      when 'right'
        assign h_ai = 'center'
        assign h_jc = 'flex-end'
        assign h_ta = 'right'
    endcase

    assign sizes_str = '(min-width: 1024px) 100vw, 100vw'
    assign widths_str = '640,828,1080,1280,1440,1680,1920,2048'

    assign loading_attr = 'eager'
    assign fetchpriority_attr = 'high'

    assign hero_pad_m = s.hero_pad_y | default: 24
    assign hero_pax_m = s.hero_pad_x | default: 24
    assign hero_pad_d = s.hero_pad_y_d | default: 48
    assign hero_pax_d = s.hero_pad_x_d | default: 48
  %}

  <div class="{{ container_class }} q-cw" style="margin-bottom: {{ stack_gap_px }}px;">
    <article class="q-hero" style="height: {{ s.hero_height_m | default: 60 }}vh;">
      <style>
        @media (min-width:768px){#{{ sid }} .q-hero{height: {{ s.hero_height_d | default: 85 }}vh;}}
        #{{ sid }} .q-hero .q-hero-inner{padding: {{ hero_pad_m }}px {{ hero_pax_m }}px;}
        @media (min-width:768px){#{{ sid }} .q-hero .q-hero-inner{padding: {{ hero_pad_d }}px {{ hero_pax_d }}px;}}
      </style>

      <div class="q-hero-media" aria-hidden="true">
        {% liquid
          assign yt_id = ''
          assign u = s.hero_video | strip
          if u contains 'youtu.be/'
            assign yt_id = u | split: 'youtu.be/' | last | split: '?' | first
          elsif u contains 'youtube.com/watch?v='
            assign yt_id = u | split: 'watch?v=' | last | split: '&' | first
          elsif u contains 'youtube.com/embed/'
            assign yt_id = u | split: '/embed/' | last | split: '?' | first
          endif
        %}
        {% if yt_id != '' %}
          <div class="q-yt">
            <iframe title="YouTube video" loading="lazy"
              src="https://www.youtube.com/embed/{{ yt_id }}?autoplay=1&mute=1&loop=1&playlist={{ yt_id }}&controls=0&playsinline=1&modestbranding=1&rel=0&iv_load_policy=3"
              allow="autoplay; encrypted-media; picture-in-picture" referrerpolicy="origin-when-cross-origin"></iframe>
          </div>
        {% elsif s.hero_video != blank %}
          <video class="absolute inset-0 w-full h-full object-cover"
                 style="object-position: {{ s.hero_object_position | default: 'center center' }};"
                 autoplay loop muted playsinline preload="none"
                 {% if s.hero_image != blank %}poster="{{ s.hero_image | image_url: width: 1280 }}"{% endif %}>
            <source src="{{ s.hero_video }}" type="video/mp4">
          </video>
        {% elsif s.hero_image != blank %}
          {% if s.hero_mobile_image != blank %}
            <picture>
              <source media="(max-width: 639px)" srcset="{{ s.hero_mobile_image | image_url: width: 960 }}">
              {{ s.hero_image | image_url: width: 2048 | image_tag: widths: widths_str, sizes: sizes_str, loading: loading_attr, fetchpriority: fetchpriority_attr, class: 'absolute inset-0 w-full h-full object-cover', alt: s.hero_image_alt }}
            </picture>
          {% else %}
            {{ s.hero_image | image_url: width: 2048 | image_tag: widths: widths_str, sizes: sizes_str, loading: loading_attr, fetchpriority: fetchpriority_attr, class: 'absolute inset-0 w-full h-full object-cover', alt: s.hero_image_alt }}
          {% endif %}
        {% endif %}
      </div>

      {% if hero_has_media and hero_ov_opacity > 0 %}
        <div class="absolute inset-0" style="background-color: {{ hero_ov_color }}; opacity: {{ hero_ov_opacity | times: 0.01 }};"></div>
        {% if s.hero_use_gradient %}<div class="q-gradient" style="background:linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,.35) 100%);"></div>{% endif %}
      {% endif %}

      <div class="q-hero-card" style="align-items: {{ h_ai }}; justify-content: {{ h_jc }};">
        <div class="q-hero-inner">
          {% if s.hero_kicker != blank %}<p class="mb-2 text-sm font-semibold tracking-wide uppercase" style="color: {{ hero_txt }}; text-align: {{ h_ta }};">{{ s.hero_kicker }}</p>{% endif %}
          {% if s.hero_heading != blank %}<h2 class="mb-3" style="color: {{ hero_txt }}; text-align: {{ h_ta }};">{{ s.hero_heading }}</h2>{% endif %}
          {% if s.hero_subheading != blank %}<p class="sub mb-5" style="color: {{ hero_txt }}; text-align: {{ h_ta }};">{{ s.hero_subheading }}</p>{% endif %}

          {% liquid
            assign cta_href = s.hero_cta_link
            if cta_href == blank and s.hero_cta_product
              assign cta_href = s.hero_cta_product.url
            endif
            if cta_href == blank and s.hero_cta_collection
              assign cta_href = s.hero_cta_collection.url
            endif
            if cta_href == blank and s.hero_cta_article
              assign cta_href = s.hero_cta_article.url
            endif

            assign cta2_href = s.hero_cta2_link
            if cta2_href == blank and s.hero_cta2_product
              assign cta2_href = s.hero_cta2_product.url
            endif
            if cta2_href == blank and s.hero_cta2_collection
              assign cta2_href = s.hero_cta2_collection.url
            endif
            if cta2_href == blank and s.hero_cta2_article
              assign cta2_href = s.hero_cta2_article.url
            endif

            assign has_cta1 = false
            if s.hero_cta_text != blank and cta_href != blank
              assign has_cta1 = true
            endif
            assign has_cta2 = false
            if s.hero_cta2_text != blank and cta2_href != blank
              assign has_cta2 = true
            endif
          %}

          {% if has_cta1 or has_cta2 %}
            <div class="q-cta {% if h_ta == 'center' %}justify-center{% elsif h_ta == 'right' %}justify-end{% else %}justify-start{% endif %}">
              {% if has_cta1 %}
                <a href="{{ cta_href }}" class="q-btn q-btn--solid"
                  aria-label="{{ s.hero_cta_aria | default: s.hero_cta_text | escape }}"
                  style="background-color: {{ s.button_bg_color | default: settings.color_primary }}; color: {{ s.button_text_color | default: settings.text_on_color }}; border-radius: {{ s.button_radius | default: settings.button_radius }}px;">
                  {{ s.hero_cta_text }}
                </a>
              {% endif %}
              {% if has_cta2 %}
                <a href="{{ cta2_href }}" class="q-btn q-btn--outline"
                  aria-label="{{ s.hero_cta2_aria | default: s.hero_cta2_text | escape }}"
                  style="color: {{ s.button_text_color | default: settings.text_on_color }}; border: {{ s.button_border_width | default: settings.button_border_width }}px solid {{ s.button_border_color | default: settings.text_on_color }}; border-radius: {{ s.button_radius | default: settings.button_radius }}px;">
                  {{ s.hero_cta2_text }}
                </a>
              {% endif %}
            </div>
          {% endif %}
        </div>
      </div>
    </article>
  </div>
{% endif %}

{%- comment -%} ============ GRID ============ {%- endcomment -%}
{% if s.layout_mode == 'grid_only' or s.layout_mode == 'hero_plus_grid' %}
  <div class="{{ container_class }} q-cw">
    <div class="q-grid"
         style="--cols-m: {{ cols_m }}; --cols-t: {{ cols_t }}; --cols-d: {{ cols_d }}; --row-m: {{ row_m }}px; --row-t: {{ row_t }}px; --row-d: {{ row_d }}px; --gap-m: {{ gap_m }}px; --gap-t: {{ gap_t }}px; --gap-d: {{ gap_d }}px;">
      {% for block in section.blocks %}
        {% assign b = block.settings %}
        {% liquid
          assign cs_m = b.span_cols_m | default: 1
          assign rs_m = b.span_rows_m | default: 1
          assign cs_t = b.span_cols_t | default: 3
          assign rs_t = b.span_rows_t | default: 1
          assign cs_d = b.span_cols_d | default: 3
          assign rs_d = b.span_rows_d | default: 1

          if forloop.first
            if b.span_cols_d == blank
              assign cs_d = 6
            endif
            if b.span_rows_d == blank
              assign rs_d = 2
            endif
            if b.span_cols_t == blank
              assign cs_t = 4
            endif
            if b.span_rows_t == blank
              assign rs_t = 2
            endif
            if b.span_cols_m == blank
              assign cs_m = 2
            endif
            if b.span_rows_m == blank
              assign rs_m = 2
            endif
          endif

          assign has_media = false
          if b.background_video != blank or b.background_image != blank or b.mobile_image != blank
            assign has_media = true
          endif

          assign ov_color = b.overlay_color
          if ov_color == blank
            assign ov_color = s.overlay_color
          endif
          assign ov_opacity = s.overlay_opacity | default: 45 | plus: 0
          assign b_ov = b.overlay_opacity | plus: 0
          if b_ov > 0
            assign ov_opacity = b_ov
          endif

          assign tone = b.text_tone | default: s.text_tone | default: 'auto'
          assign txt = settings.text_on_color
          if tone == 'dark'
            assign txt = settings.text_base
          elsif tone == 'light'
            assign txt = settings.text_on_color
          elsif tone == 'auto'
            if ov_opacity < 45
              assign txt = settings.text_base
            endif
          endif

          assign pos = b.content_position | default: 'center'
          assign ai = 'center'
          assign jc = 'center'
          assign ta = 'center'

          if pos == 'top-left'
            assign ai = 'flex-start'
            assign jc = 'flex-start'
            assign ta = 'left'
          elsif pos == 'top-right'
            assign ai = 'flex-start'
            assign jc = 'flex-end'
            assign ta = 'right'
          elsif pos == 'bottom-left'
            assign ai = 'flex-end'
            assign jc = 'flex-start'
            assign ta = 'left'
          elsif pos == 'bottom-right'
            assign ai = 'flex-end'
            assign jc = 'flex-end'
            assign ta = 'right'
          elsif pos == 'left'
            assign ai = 'center'
            assign jc = 'flex-start'
            assign ta = 'left'
          elsif pos == 'right'
            assign ai = 'center'
            assign jc = 'flex-end'
            assign ta = 'right'
          endif

          assign cta_href = b.cta_link
          if cta_href == blank and b.cta_product
            assign cta_href = b.cta_product.url
          endif
          if cta_href == blank and b.cta_collection
            assign cta_href = b.cta_collection.url
          endif
          if cta_href == blank and b.cta_article
            assign cta_href = b.cta_article.url
          endif

          assign cta2_href = b.cta2_link
          if cta2_href == blank and b.cta2_product
            assign cta2_href = b.cta2_product.url
          endif
          if cta2_href == blank and b.cta2_collection
            assign cta2_href = b.cta2_collection.url
          endif
          if cta2_href == blank and b.cta2_article
            assign cta2_href = b.cta2_article.url
          endif

          assign has_cta1 = false
          if b.cta_text != blank and cta_href != blank
            assign has_cta1 = true
          endif
          assign has_cta2 = false
          if b.cta2_text != blank and cta2_href != blank
            assign has_cta2 = true
          endif

          assign sizes_str = '(min-width: 1024px) calc(100vw / ' | append: cols_d | append: ' * ' | append: cs_d | append: ' - ' | append: gap_d | append: 'px), (min-width: 640px) calc(100vw / ' | append: cols_t | append: ' * ' | append: cs_t | append: ' - ' | append: gap_t | append: 'px), 100vw'
          assign widths_str = '480,640,750,828,960,1080,1280,1440,1680,1920,2048'

          if forloop.first and s.layout_mode == 'grid_only'
            assign loading_attr = 'eager'
            assign fetchpriority_attr = 'high'
          else
            assign loading_attr = 'lazy'
            assign fetchpriority_attr = 'auto'
          endif
        %}

        <article class="q-item"
          style="--cspan-m: {{ cs_m }}; --rspan-m: {{ rs_m }}; --cspan-t: {{ cs_t }}; --rspan-t: {{ rs_t }}; --cspan-d: {{ cs_d }}; --rspan-d: {{ rs_d }};"
          aria-label="{{ b.heading | default: b.kicker | default: 'Promotional tile' | escape }}"
          {{ block.shopify_attributes }}>
          <div class="q-media" aria-hidden="true">
            {% liquid
              assign tyt = ''
              assign tu = b.background_video | strip
              if tu contains 'youtu.be/'
                assign tyt = tu | split: 'youtu.be/' | last | split: '?' | first
              elsif tu contains 'youtube.com/watch?v='
                assign tyt = tu | split: 'watch?v=' | last | split: '&' | first
              elsif tu contains 'youtube.com/embed/'
                assign tyt = tu | split: '/embed/' | last | split: '?' | first
              endif
            %}
            {% if tyt != '' %}
              <div class="q-yt">
                <iframe title="YouTube video" loading="lazy"
                  src="https://www.youtube.com/embed/{{ tyt }}?autoplay=1&mute=1&loop=1&playlist={{ tyt }}&controls=0&playsinline=1&modestbranding=1&rel=0&iv_load_policy=3"
                  allow="autoplay; encrypted-media; picture-in-picture" referrerpolicy="origin-when-cross-origin"></iframe>
              </div>
            {% elsif b.background_video != blank %}
              <video class="absolute inset-0 w-full h-full object-cover"
                     style="object-position: {{ b.object_position | default: 'center center' }};"
                     autoplay loop muted playsinline preload="none"
                     {% if b.background_image != blank %}poster="{{ b.background_image | image_url: width: 1280 }}"{% endif %}>
                <source src="{{ b.background_video }}" type="video/mp4">
              </video>
            {% elsif b.background_image != blank %}
              {% if b.mobile_image != blank %}
                <picture>
                  <source media="(max-width: 639px)" srcset="{{ b.mobile_image | image_url: width: 960 }}">
                  {{ b.background_image | image_url: width: 2048 | image_tag: widths: widths_str, sizes: sizes_str, loading: loading_attr, fetchpriority: fetchpriority_attr, class: 'absolute inset-0 w-full h-full object-cover', alt: b.image_alt }}
                </picture>
              {% else %}
                {{ b.background_image | image_url: width: 2048 | image_tag: widths: widths_str, sizes: sizes_str, loading: loading_attr, fetchpriority: fetchpriority_attr, class: 'absolute inset-0 w-full h-full object-cover', alt: b.image_alt }}
              {% endif %}
            {% endif %}
          </div>

          {% if has_media and ov_opacity > 0 %}
            <div class="absolute inset-0" aria-hidden="true" style="background-color: {{ ov_color }}; opacity: {{ ov_opacity | times: 0.01 }};"></div>
            {% if s.use_gradient %}<div class="q-gradient" style="background:linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,.35) 100%);"></div>{% endif %}
          {% endif %}

          <div class="q-card" style="align-items: {{ ai }}; justify-content: {{ jc }};">
            <div class="q-inner {{ s.pad_content | default: 'p-8 md:p-10' }}">
              {% if b.kicker != blank %}<p class="mb-2 text-sm font-semibold tracking-wide uppercase" style="color: {{ txt }}; text-align: {{ ta }};">{{ b.kicker }}</p>{% endif %}
              {% if b.heading != blank %}<h3 class="text-2xl md:text-4xl" style="color: {{ txt }}; text-align: {{ ta }};">{{ b.heading }}</h3>{% endif %}
              {% if b.subheading != blank %}<p class="mt-2 text-base md:text-lg {% if b.hide_text_mobile %}hidden md:block{% endif %}" style="color: {{ txt }}; text-align: {{ ta }};">{{ b.subheading }}</p>{% endif %}

              {% if has_cta1 or has_cta2 %}
                <div class="q-cta {% if ta == 'center' %}justify-center{% elsif ta == 'right' %}justify-end{% else %}justify-start{% endif %}">
                  {% if has_cta1 %}
                    <a href="{{ cta_href }}" class="q-btn q-btn--solid"
                       aria-label="{{ b.cta_aria_label | default: b.cta_text | escape }}"
                       style="background-color: {{ s.button_bg_color | default: settings.color_primary }}; color: {{ s.button_text_color | default: settings.text_on_color }}; border-radius: {{ s.button_radius | default: settings.button_radius }}px;">
                      {{ b.cta_text }}
                    </a>
                  {% endif %}
                  {% if has_cta2 %}
                    <a href="{{ cta2_href }}" class="q-btn q-btn--outline"
                       aria-label="{{ b.cta2_aria_label | default: b.cta2_text | escape }}"
                       style="color: {{ s.button_text_color | default: settings.text_on_color }}; border: {{ s.button_border_width | default: settings.button_border_width }}px solid {{ s.button_border_color | default: settings.text_on_color }}; border-radius: {{ s.button_radius | default: settings.button_radius }}px;">
                      {{ b.cta2_text }}
                    </a>
                  {% endif %}
                </div>
              {% endif %}
            </div>
          </div>
        </article>
      {% endfor %}
    </div>
  </div>
{% endif %}

{% if s.send_events %}
  <script>
    (function() {
      var root = document.getElementById('{{ sid }}');
      if (!root) return;
      root.addEventListener('click', function(e) {
        var a = e.target.closest('a.q-btn');
        if (!a) return;
        var payload = { component: 'hero_grid', href: a.getAttribute('href') };
        window.dispatchEvent(new CustomEvent('quadratum:cta', { detail: payload }));
        if (window.dataLayer && Array.isArray(window.dataLayer)) {
          window.dataLayer.push({ event: 'quadratum_cta', component: payload.component, href: payload.href });
        }
      });
    })();
  </script>
{% endif %}
</section>

{% render 'tw-safelist-banners' %}

{% schema %}
{
  "name": "Hero + Grid Banner",
  "tag": "section",
  "class": "q-hero-grid",
  "settings": [
    { "type": "header", "content": "Section Heading (optional)" },
    { "type": "text", "id": "kicker", "label": "Kicker", "default": "Editorial" },
    { "type": "text", "id": "heading", "label": "Heading", "default": "Grid Banner — Hero" },
    { "type": "textarea", "id": "subheading", "label": "Subheading", "default": "Magazine-style hero with optional grid." },

    { "type": "header", "content": "Layout" },
    { "type": "select", "id": "layout_mode", "label": "Layout mode", "default": "hero_plus_grid", "options": [
      { "value": "hero_plus_grid", "label": "Hero + Grid" },
      { "value": "hero_only", "label": "Hero only" },
      { "value": "grid_only", "label": "Grid only" }
    ]},
    { "type": "select", "id": "container_mode", "label": "Container", "default": "contained", "options": [
      { "value": "contained", "label": "Contained (side padding)" },
      { "value": "full", "label": "Full-bleed (edge to edge)" }
    ]},
    { "type": "select", "id": "pad_y", "label": "Vertical padding", "default": "py-16 md:py-24", "options": [
      { "value": "py-8 md:py-12", "label": "Small" },
      { "value": "py-12 md:py-16", "label": "Medium" },
      { "value": "py-16 md:py-24", "label": "Large" }
    ]},

    { "type": "header", "content": "Hero" },
    { "type": "text", "id": "hero_kicker", "label": "Hero kicker", "default": "Story" },
    { "type": "text", "id": "hero_heading", "label": "Hero heading", "default": "This Season’s Drop" },
    { "type": "textarea", "id": "hero_subheading", "label": "Hero subheading", "default": "Short copy with clear value." },

    { "type": "image_picker", "id": "hero_image", "label": "Hero image" },
    { "type": "image_picker", "id": "hero_mobile_image", "label": "Hero mobile image (optional)" },
    { "type": "text", "id": "hero_image_alt", "label": "Image alt" },
    { "type": "text", "id": "hero_video", "label": "Hero background video (YouTube URL or MP4)" },
    { "type": "text", "id": "hero_object_position", "label": "Object position (e.g., 'center 30%')" },

    { "type": "color", "id": "hero_overlay_color", "label": "Hero overlay color", "default": "#000000" },
    { "type": "range", "id": "hero_overlay_opacity", "label": "Hero overlay opacity", "min": 0, "max": 100, "step": 5, "default": 45, "unit": "%" },
    { "type": "checkbox", "id": "hero_use_gradient", "label": "Add bottom gradient to hero", "default": true },
    { "type": "select", "id": "hero_text_tone", "label": "Hero text tone", "default": "auto", "options": [
      { "value": "auto", "label": "Auto" }, { "value": "light", "label": "Light" }, { "value": "dark", "label": "Dark" }
    ]},
    { "type": "select", "id": "hero_content_position", "label": "Hero content position", "default": "center", "options": [
      { "value": "top-left", "label": "Top left" }, { "value": "top-right", "label": "Top right" },
      { "value": "bottom-left", "label": "Bottom left" }, { "value": "bottom-right", "label": "Bottom right" },
      { "value": "left", "label": "Center left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Center right" }
    ]},

    { "type": "range", "id": "hero_height_m", "label": "Hero height (mobile, vh)", "min": 40, "max": 90, "step": 5, "default": 60 },
    { "type": "range", "id": "hero_height_d", "label": "Hero height (desktop, vh)", "min": 40, "max": 90, "step": 5, "default": 85 },
    { "type": "range", "id": "hero_pad_x", "label": "Hero inner pad X (mobile, px)", "min": 12, "max": 64, "step": 4, "default": 24 },
    { "type": "range", "id": "hero_pad_y", "label": "Hero inner pad Y (mobile, px)", "min": 12, "max": 64, "step": 4, "default": 24 },
    { "type": "range", "id": "hero_pad_x_d", "label": "Hero inner pad X (desktop, px)", "min": 12, "max": 160, "step": 4, "default": 48 },
    { "type": "range", "id": "hero_pad_y_d", "label": "Hero inner pad Y (desktop, px)", "min": 12, "max": 160, "step": 4, "default": 48 },

    { "type": "range", "id": "stack_gap", "label": "Space below hero (px)", "min": 0, "max": 120, "step": 4, "default": 56 },

    { "type": "checkbox", "id": "enable_text_pills", "label": "Readable text pills (hero)", "default": false },

    { "type": "header", "content": "Grid (if shown)" },
    { "type": "select", "id": "cols_mobile", "label": "Columns (mobile ≤640px)", "default": "2", "options": [
      { "value": "1", "label": "1" }, { "value": "2", "label": "2" }
    ]},
    { "type": "select", "id": "cols_tablet", "label": "Columns (tablet ≥640px)", "default": "6", "options": [
      { "value": "4", "label": "4" }, { "value": "6", "label": "6" }
    ]},
    { "type": "select", "id": "cols_desktop", "label": "Columns (desktop ≥1024px)", "default": "12", "options": [
      { "value": "8", "label": "8" }, { "value": "12", "label": "12" }
    ]},
    { "type": "range", "id": "row_h_mobile", "label": "Row height (mobile)", "min": 120, "max": 260, "step": 4, "default": 160, "unit": "px" },
    { "type": "range", "id": "row_h_tablet", "label": "Row height (tablet)", "min": 140, "max": 320, "step": 4, "default": 200, "unit": "px" },
    { "type": "range", "id": "row_h_desktop", "label": "Row height (desktop)", "min": 160, "max": 380, "step": 4, "default": 240, "unit": "px" },
    { "type": "select", "id": "gap", "label": "Tile gap", "default": "gap-6 md:gap-8", "options": [
      { "value": "gap-3 md:gap-4", "label": "Tight" },
      { "value": "gap-4 md:gap-6", "label": "Comfort" },
      { "value": "gap-6 md:gap-8", "label": "Roomy" }
    ]},
    { "type": "select", "id": "pad_content", "label": "Tile inner padding", "default": "p-8 md:p-10", "options": [
      { "value": "p-6 md:p-8", "label": "Small" }, { "value": "p-8 md:p-10", "label": "Medium" }, { "value": "p-10 md:p-12", "label": "Large" }
    ]},
    { "type": "checkbox", "id": "enable_tile_text_pills", "label": "Readable text pills (tiles)", "default": false },

    { "type": "header", "content": "Overlay & Tone (Grid defaults)" },
    { "type": "color", "id": "overlay_color", "label": "Overlay color", "default": "#000000" },
    { "type": "range", "id": "overlay_opacity", "label": "Overlay opacity", "min": 0, "max": 100, "step": 5, "default": 45, "unit": "%" },
    { "type": "checkbox", "id": "use_gradient", "label": "Add bottom gradient", "default": true },
    { "type": "select", "id": "text_tone", "label": "Text tone (default)", "default": "auto", "options": [
      { "value": "auto", "label": "Auto" }, { "value": "light", "label": "Light" }, { "value": "dark", "label": "Dark" }
    ]},

    { "type": "header", "content": "Buttons (global)" },
    { "type": "color", "id": "button_bg_color", "label": "Solid background", "default": "#111111" },
    { "type": "color", "id": "button_text_color", "label": "Text color", "default": "#ffffff" },
    { "type": "color", "id": "button_border_color", "label": "Outline border color", "default": "#ffffff" },
    { "type": "range", "id": "button_border_width", "label": "Outline border width", "min": 0, "max": 6, "step": 1, "default": 1 },
    { "type": "range", "id": "button_radius", "label": "Corner radius", "min": 0, "max": 36, "step": 2, "default": 12 },

    { "type": "header", "content": "Visibility & Analytics" },
    { "type": "text", "id": "anchor_id", "label": "Optional anchor ID" },
    { "type": "text", "id": "region_label", "label": "Accessible region label", "default": "Promotional hero and grid" },
    { "type": "checkbox", "id": "hide_on_mobile", "label": "Hide on mobile", "default": false },
    { "type": "checkbox", "id": "hide_on_desktop", "label": "Hide on desktop", "default": false },
    { "type": "checkbox", "id": "send_events", "label": "Send analytics events on CTA clicks", "default": false }
  ],
  "blocks": [
    {
      "type": "tile",
      "name": "Grid Tile",
      "settings": [
        { "type": "header", "content": "Background" },
        { "type": "image_picker", "id": "background_image", "label": "Background image" },
        { "type": "image_picker", "id": "mobile_image", "label": "Mobile image (optional)" },
        { "type": "text", "id": "background_video", "label": "Background video (YouTube URL or MP4)" },
        { "type": "text", "id": "image_alt", "label": "Alt text" },

        { "type": "header", "content": "Overlay & Tone" },
        { "type": "color", "id": "overlay_color", "label": "Overlay color" },
        { "type": "range", "id": "overlay_opacity", "label": "Overlay opacity (set >0 to override section)", "min": 0, "max": 100, "step": 5, "default": 0, "unit": "%" },
        { "type": "select", "id": "text_tone", "label": "Text tone", "default": "auto", "options": [
          { "value": "auto", "label": "Auto" }, { "value": "light", "label": "Light" }, { "value": "dark", "label": "Dark" }
        ]},

        { "type": "header", "content": "Content" },
        { "type": "text", "id": "kicker", "label": "Kicker", "default": "Featured" },
        { "type": "text", "id": "heading", "label": "Heading", "default": "Tile headline" },
        { "type": "textarea", "id": "subheading", "label": "Short description", "default": "Tell a tiny story that invites a click." },
        { "type": "checkbox", "id": "hide_text_mobile", "label": "Hide paragraph on mobile", "default": false },
        { "type": "select", "id": "content_position", "label": "Content position", "default": "center", "options": [
          { "value": "top-left", "label": "Top left" }, { "value": "top-right", "label": "Top right" },
          { "value": "bottom-left", "label": "Bottom left" }, { "value": "bottom-right", "label": "Bottom right" },
          { "value": "left", "label": "Center left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Center right" }
        ]},

        { "type": "header", "content": "Buttons" },
        { "type": "text", "id": "cta_text", "label": "Primary text", "default": "Shop now" },
        { "type": "url", "id": "cta_link", "label": "Primary URL" },
        { "type": "product", "id": "cta_product", "label": "…or product" },
        { "type": "collection", "id": "cta_collection", "label": "…or collection" },
        { "type": "article", "id": "cta_article", "label": "…or article" },
        { "type": "text", "id": "cta_aria_label", "label": "Primary ARIA label", "default": "Shop now" },

        { "type": "text", "id": "cta2_text", "label": "Secondary text", "default": "Learn more" },
        { "type": "url", "id": "cta2_link", "label": "Secondary URL" },
        { "type": "product", "id": "cta2_product", "label": "…or product" },
        { "type": "collection", "id": "cta2_collection", "label": "…or collection" },
        { "type": "article", "id": "cta2_article", "label": "…or article" },
        { "type": "text", "id": "cta2_aria_label", "label": "Secondary ARIA label", "default": "Learn more" },

        { "type": "header", "content": "Grid spans" },
        { "type": "range", "id": "span_cols_m", "label": "Columns (mobile)", "min": 1, "max": 3, "step": 1, "default": 1 },
        { "type": "range", "id": "span_rows_m", "label": "Rows (mobile)", "min": 1, "max": 3, "step": 1, "default": 1 },
        { "type": "range", "id": "span_cols_t", "label": "Columns (tablet)", "min": 1, "max": 6, "step": 1, "default": 3 },
        { "type": "range", "id": "span_rows_t", "label": "Rows (tablet)", "min": 1, "max": 3, "step": 1, "default": 1 },
        { "type": "range", "id": "span_cols_d", "label": "Columns (desktop)", "min": 1, "max": 12, "step": 1, "default": 3 },
        { "type": "range", "id": "span_rows_d", "label": "Rows (desktop)", "min": 1, "max": 3, "step": 1, "default": 1 }
      ]
    }
  ],
  "max_blocks": 8,
  "presets": [
    {
      "name": "Hero + Grid (Magazine)",
      "category": "Banner",
      "settings": {
        "layout_mode": "hero_plus_grid",
        "hero_kicker": "Story",
        "hero_heading": "The September Edit",
        "hero_subheading": "Soft layers, rich textures, editorial styling.",
        "hero_overlay_color": "#000000",
        "hero_overlay_opacity": 45,
        "hero_text_tone": "auto",
        "hero_content_position": "center",
        "hero_height_m": 60,
        "hero_height_d": 85,
        "hero_pad_x": 24,
        "hero_pad_y": 24,
        "hero_pad_x_d": 48,
        "hero_pad_y_d": 48,
        "stack_gap": 56,
        "cols_mobile": "2",
        "cols_tablet": "6",
        "cols_desktop": "12",
        "row_h_mobile": 160,
        "row_h_tablet": 200,
        "row_h_desktop": 240
      },
      "blocks": [
        { "type": "tile", "settings": { "kicker": "Women", "heading": "New Arrivals", "cta_text": "Shop Women", "span_cols_d": 6, "span_rows_d": 2 } },
        { "type": "tile", "settings": { "kicker": "Home", "heading": "Warm Minimal", "cta_text": "Shop Home", "span_cols_d": 3, "span_rows_d": 1 } },
        { "type": "tile", "settings": { "kicker": "Tech", "heading": "RGB & Beyond", "cta_text": "Build Now", "span_cols_d": 3, "span_rows_d": 1 } },
        { "type": "tile", "settings": { "kicker": "Jewelry", "heading": "Gold That Goes", "cta_text": "Shop Fine", "span_cols_d": 3, "span_rows_d": 1 } }
      ]
    }
  ]
}
{% endschema %}
