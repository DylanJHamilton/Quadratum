{% comment %}
  Quadratum — CTA: Web3
  • Tokenized CTA card; optional background image on ROOT <section>
  • Gradient surface, layered shadows, reveal on view, hover lift
  • Icon sources: inline SVG (block) → assets/icons/[library]/<file>.svg → text badge fallback
  • Libraries: Lucide (root), Tabler Filled (tabler/filled), Tabler Outline (tabler/outline), or Custom path
  • Icons can be colored via block “Icon color”. Inline SVG uses currentColor. File icons use CSS mask + background-color.
  • Right-side illustration is responsive (320–800px) and fits 4:3
{% endcomment %}

{% liquid
  assign s = section.settings
  assign connected = s.simulate_connected

  assign align_class = 'align-center'
  if s.alignment == 'start'
    assign align_class = 'align-start'
  endif

  capture bg_color
    if s.background_style == 'accent'
      echo 'var(--surface-accent, rgba(0,0,0,0.03))'
    elsif s.background_style == 'dark'
      echo 'var(--surface-inverse, #111)'
    else
      echo 'var(--surface, #fff)'
    endif
  endcapture

  capture primary_label
    if connected
      echo 'Connected ✅'
    else
      echo s.primary_label | default: 'Connect Wallet'
    endif
  endcapture

  assign icon_count = 0
  for block in section.blocks
    if block.type == 'wallet_icon'
      assign icon_count = icon_count | plus: 1
    endif
  endfor
%}

<section id="cta-web3-{{ section.id }}" class="q-section q-cta-web3" role="region" aria-label="Web3 call to action" style="background-color: {{ bg_color }}; position: relative;">
  {% if s.bg_image != blank %}
    <div class="qw3-bg" aria-hidden="true" style="background-image: url({{ s.bg_image | image_url: width: 2400 }});"></div>
  {% endif %}

  <div class="qw3-container">
    <div class="qw3-card{% if s.image != blank %} has-media{% endif %}">
      <div class="qw3-content {{ align_class }}">
        {% if s.eyebrow != blank %}<p class="qw3-eyebrow">{{ s.eyebrow }}</p>{% endif %}
        {% if s.headline != blank %}<h2 class="qw3-title">{{ s.headline }}</h2>{% endif %}
        {% if s.subheading != blank %}<p class="qw3-sub">{{ s.subheading }}</p>{% endif %}

        {% if s.show_icons %}
          <ul class="qw3-icons" aria-label="Supported wallets">
            {% if icon_count > 0 %}
              {% for block in section.blocks %}
                {% if block.type == 'wallet_icon' %}
                  <li {{ block.shopify_attributes }}>
                    {% if block.settings.icon_svg != blank %}
                      {%- comment -%}
                        INLINE SVG PATH (supports color via currentColor)
                        Tip: ensure your SVG uses stroke/fill="currentColor"
                      {%- endcomment -%}
                      <span class="qw3-icon-svg" style="{% if block.settings.icon_color != blank %}--qw3-icon-color: {{ block.settings.icon_color }};{% endif %}">
                        {{ block.settings.icon_svg }}
                      </span>
                    {% else %}
                      {%- liquid
                        assign lib = block.settings.icon_library | default: 'lucide'
                        assign filename_raw = block.settings.icon_filename | strip
                        assign filename = filename_raw | downcase | replace: ' ', '-' | remove: '.svg'
                        assign custom_path_raw = block.settings.icon_custom_path | strip
                        assign custom_rel = custom_path_raw | remove_first: 'icons/' | remove: '.svg'
                        assign src_path = ''

                        if lib == 'lucide' and filename != blank
                          assign src_path = 'icons/' | append: filename | append: '.svg'
                        elsif lib == 'tabler-filled' and filename != blank
                          assign src_path = 'icons/tabler/filled/' | append: filename | append: '.svg'
                        elsif lib == 'tabler-outline' and filename != blank
                          assign src_path = 'icons/tabler/outline/' | append: filename | append: '.svg'
                        elsif lib == 'custom' and custom_rel != blank
                          assign src_path = 'icons/' | append: custom_rel
                          unless custom_rel contains '.svg'
                            assign src_path = src_path | append: '.svg'
                          endunless
                        endif

                        assign icon_color = block.settings.icon_color | default: ''
                      -%}

                      {% if src_path != blank %}
                        {%- comment -%}
                          FILE SVG PATH (colored via CSS mask + background-color)
                          Works great for single-color line/filled icons (Lucide/Tabler).
                        {%- endcomment -%}
                        <span
                          class="qw3-icon-mask"
                          style="--qw3-icon-url: url({{ src_path | asset_url }});{% if icon_color != blank %} --qw3-icon-color: {{ icon_color }};{% endif %}"
                          aria-label="{{ block.settings.alt_text | default: filename | replace: '-', ' ' | capitalize }}">
                        </span>
                      {% else %}
                        <span class="qw3-badge">{{ block.settings.alt_text | default: 'Wallet' }}</span>
                      {% endif %}
                    {% endif %}
                  </li>
                {% endif %}
              {% endfor %}
            {% else %}
              <li><span class="qw3-badge">MetaMask</span></li>
              <li><span class="qw3-badge">WalletConnect</span></li>
              <li><span class="qw3-badge">Coinbase</span></li>
            {% endif %}
          </ul>
        {% endif %}

        <div class="qw3-actions">
          {% if connected %}
            <button class="btn btn-primary is-connected" aria-disabled="true" tabindex="-1">{{ primary_label }}</button>
          {% else %}
            {% if s.primary_url != blank %}
              <a class="btn btn-primary" href="{{ s.primary_url }}">{{ primary_label }}</a>
            {% else %}
              <button class="btn btn-primary js-connect" type="button" aria-pressed="false">{{ primary_label }}</button>
            {% endif %}
          {% endif %}
          {% if s.secondary_label != blank and s.secondary_url != blank %}
            <a class="btn btn-secondary" href="{{ s.secondary_url }}">{{ s.secondary_label }}</a>
          {% endif %}
        </div>
      </div>

      <div class="qw3-media">
        {% if s.image != blank %}
          <div class="qw3-media-wrap">
            {{ s.image
              | image_url: width: 800, format: 'webp'
              | image_tag:
                loading: 'lazy',
                fetchpriority: 'low',
                alt: s.headline,
                class: 'qw3-img',
                sizes: "(min-width: 1200px) 520px, (min-width: 990px) 440px, 92vw",
                widths: "320,360,420,480,560,640,720,800"
            }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  <style>
    #cta-web3-{{ section.id }} .qw3-bg{ position:absolute; inset:0; background-repeat:no-repeat; background-position:center; background-size:cover; opacity: var(--qw3-bg-opacity, 0.12); filter: var(--qw3-bg-filter, none); pointer-events:none; z-index:0; }
    #cta-web3-{{ section.id }} .qw3-container{ position:relative; z-index:1; }

    #cta-web3-{{ section.id }} .qw3-container{ margin-inline:auto; width:min(100%, var(--container-xl, 1200px)); padding-block: var(--space-xl, 4rem); padding-inline: var(--space-lg, 1.5rem); }

    #cta-web3-{{ section.id }} .qw3-card{
      display:grid; gap: var(--space-lg, 1.5rem); grid-template-columns: 1fr; align-items:center;
      padding: var(--space-2xl, 3rem); border-radius: var(--radius-2xl, 24px);
      background: linear-gradient(180deg, color-mix(in oklab, var(--surface, #fff) 85%, var(--surface-accent, #eef) 15%), var(--surface, #fff));
      box-shadow: 0 8px 24px rgba(0,0,0,.06), 0 2px 8px rgba(0,0,0,.04);
      opacity: 0; transform: translateY(6%); will-change: opacity, transform;
    }
    #cta-web3-{{ section.id }} .qw3-card:hover{ box-shadow: 0 16px 40px rgba(0,0,0,.12); }
    @keyframes qw3-reveal{ from{opacity:0;transform:translateY(6%)} to{opacity:1;transform:translateY(0)} }
    #cta-web3-{{ section.id }} .qw3-card.is-visible{ animation: qw3-reveal 360ms ease forwards; }

    #cta-web3-{{ section.id }} .qw3-content.align-center{ text-align:center; }
    #cta-web3-{{ section.id }} .qw3-content.align-start{ text-align:start; }

    #cta-web3-{{ section.id }} .qw3-eyebrow{ color: var(--text-secondary, #666); letter-spacing: var(--tracking-wide, .02em); margin: 0 0 var(--space-lg, 1.5rem) 0; font-size: var(--type-sm, .875rem); }
    #cta-web3-{{ section.id }} .qw3-title{ color: var(--text-primary, #111); font-family: var(--font-heading, inherit); font-size: var(--type-3xl, 2rem); line-height: var(--leading-tight, 1.2); margin: 0 0 var(--space-lg, 1.5rem) 0; }
    #cta-web3-{{ section.id }} .qw3-sub{ color: var(--text-secondary, #555); font-family: var(--font-body, inherit); font-size: var(--type-base, 1rem); line-height: var(--leading-relaxed, 1.7); margin: 0 0 var(--space-lg, 1.5rem) 0; }

    #cta-web3-{{ section.id }} .qw3-icons, #cta-web3-{{ section.id }} .qw3-actions{ display:flex; flex-wrap:wrap; gap: var(--space-md, 1rem); }
    #cta-web3-{{ section.id }} .qw3-content.align-center .qw3-icons, #cta-web3-{{ section.id }} .qw3-content.align-center .qw3-actions{ justify-content:center; }
    #cta-web3-{{ section.id }} .qw3-content.align-start .qw3-icons, #cta-web3-{{ section.id }} .qw3-content.align-start .qw3-actions{ justify-content:flex-start; }
    #cta-web3-{{ section.id }} .qw3-icons li{ line-height:0; }

    /* Inline SVG coloring: make sure inner paths use stroke/fill="currentColor" */
    #cta-web3-{{ section.id }} .qw3-icon-svg{
      display:inline-flex; width: var(--size-8, 2rem); height: var(--size-8, 2rem);
      color: var(--qw3-icon-color, currentColor);
      line-height: 0;
    }
    #cta-web3-{{ section.id }} .qw3-icon-svg svg{ width:100%; height:100%; display:block; }

    /* File SVG coloring via mask */
    #cta-web3-{{ section.id }} .qw3-icon-mask{
      display:inline-block; width: var(--size-8, 2rem); height: var(--size-8, 2rem);
      background-color: var(--qw3-icon-color, currentColor);
      -webkit-mask: var(--qw3-icon-url) no-repeat center / contain;
              mask: var(--qw3-icon-url) no-repeat center / contain;
    }

    #cta-web3-{{ section.id }} .qw3-badge{ display:inline-flex; align-items:center; justify-content:center; padding-inline: var(--space-md, 1rem); height: var(--control-lg, 2.75rem); border-radius: var(--radius-sm, 10px); background: var(--surface-muted, #f0f0f0); color: var(--text-secondary, #555); font: inherit; }
    #cta-web3-{{ section.id }} .btn.is-connected{ opacity:.7; pointer-events:none; }

    #cta-web3-{{ section.id }} .qw3-media{ max-width: clamp(280px, 42vw, 560px); justify-self: center; }
    #cta-web3-{{ section.id }} .qw3-media-wrap{
      aspect-ratio: 4/3; overflow: clip; border-radius: var(--radius-xl, 18px);
      box-shadow: var(--shadow-md, 0 6px 20px rgba(0,0,0,.06));
      transition: transform 240ms ease, box-shadow 240ms ease;
    }
    #cta-web3-{{ section.id }} .qw3-media-wrap:hover{ transform: translateY(-2px); box-shadow: var(--shadow-lg, 0 12px 34px rgba(0,0,0,.12)); }
    #cta-web3-{{ section.id }} .qw3-img{ width: 100%; height: 100%; object-fit: cover; display: block; }

    @media (min-width: 48rem){
      #cta-web3-{{ section.id }} .qw3-card{ grid-template-columns: 1fr; }
      #cta-web3-{{ section.id }} .qw3-card.has-media{ grid-template-columns: 1.1fr minmax(280px, 0.9fr); }
    }

    @media (prefers-reduced-motion: reduce){ #cta-web3-{{ section.id }} *{ animation:none !important; transition:none !important; } }
  </style>

  <script>
    (function(){
      var root=document.getElementById('cta-web3-{{ section.id }}'); if(!root) return;

      {% if s.primary_url == blank and connected == false %}
      var btn=root.querySelector('.js-connect');
      if(btn){
        btn.addEventListener('click',function(){
          btn.classList.add('is-connected');
          btn.setAttribute('aria-disabled','true');
          btn.setAttribute('aria-pressed','true');
          btn.textContent='Connected ✅';
          root.style.transition='opacity 160ms ease'; root.style.opacity='0.98';
          setTimeout(function(){root.style.opacity='';},200);
          try{window.dispatchEvent(new CustomEvent('quadratum:cta-web3:connected',{detail:{sectionId:'{{ section.id }}'}}));}catch(e){}
        },{passive:true});
      }
      {% endif %}

      var card=root.querySelector('.qw3-card');
      if(!card) return;
      if(!('IntersectionObserver'in window)){ card.classList.add('is-visible'); return; }
      var io=new IntersectionObserver(function(es){ es.forEach(function(e){ if(e.isIntersecting){ card.classList.add('is-visible'); io.disconnect(); } });},{threshold:.2});
      io.observe(card);
    })();
  </script>
</section>

{% schema %}
{
  "name": "CTA — Web3",
  "tag": "section",
  "class": "q-section q-cta-web3",
  "settings": [
    { "type": "text", "id": "eyebrow", "label": "Eyebrow", "default": "Web3 Ready" },
    { "type": "text", "id": "headline", "label": "Headline", "default": "Connect Your Wallet" },
    { "type": "textarea", "id": "subheading", "label": "Subheading", "default": "Experience on-chain shopping securely." },
    { "type": "text", "id": "primary_label", "label": "Primary button label", "default": "Connect Wallet" },
    { "type": "url",  "id": "primary_url", "label": "Primary button link" },
    { "type": "text", "id": "secondary_label", "label": "Secondary button label", "default": "Learn More" },
    { "type": "url",  "id": "secondary_url", "label": "Secondary button link" },
    { "type": "image_picker", "id": "image", "label": "Right-side illustration" },
    { "type": "image_picker", "id": "bg_image", "label": "Background image (optional)" },
    { "type": "checkbox", "id": "show_icons", "label": "Show wallet icons row", "default": true },
    { "type": "checkbox", "id": "simulate_connected", "label": "Simulate connected state", "default": false },
    {
      "type": "select",
      "id": "background_style",
      "label": "Background style",
      "default": "accent",
      "options": [
        { "value": "default", "label": "Default surface" },
        { "value": "accent",  "label": "Accent surface" },
        { "value": "dark",    "label": "Dark surface" }
      ]
    },
    {
      "type": "select",
      "id": "alignment",
      "label": "Text alignment",
      "default": "center",
      "options": [
        { "value": "start",  "label": "Start" },
        { "value": "center", "label": "Center" }
      ]
    }
  ],
  "blocks": [
    {
      "type": "wallet_icon",
      "name": "Wallet icon",
      "limit": 6,
      "settings": [
        {
          "type": "select",
          "id": "icon_library",
          "label": "Icon library",
          "default": "lucide",
          "options": [
            { "value": "lucide", "label": "Lucide (assets/icons/*.svg)" },
            { "value": "tabler-filled", "label": "Tabler Filled (assets/icons/tabler/filled/*.svg)" },
            { "value": "tabler-outline", "label": "Tabler Outline (assets/icons/tabler/outline/*.svg)" },
            { "value": "custom", "label": "Custom path under assets/icons/" }
          ]
        },
        { "type": "text", "id": "icon_filename", "label": "Filename (no .svg)", "info": "e.g., wallet, arrow-up, brand-ethereum" },
        { "type": "text", "id": "icon_custom_path", "label": "Custom relative path", "info": "e.g., tabler/filled/brand-ethereum or my-folder/custom-logo.svg" },
        { "type": "color", "id": "icon_color", "label": "Icon color (tint)" },
        { "type": "html", "id": "icon_svg", "label": "Inline SVG (overrides file). Use currentColor in your SVG." },
        { "type": "text", "id": "alt_text", "label": "Alt text / name" }
      ]
    }
  ],
  "presets": [
    {
      "name": "CTA — Web3: Connect (Accent)",
      "category": "Call to Action",
      "settings": {
        "eyebrow": "WEB3 ENABLED",
        "headline": "Connect Your Wallet",
        "subheading": "Verify your wallet to unlock on-chain rewards and gated drops.",
        "primary_label": "Connect Wallet",
        "primary_url": "",
        "secondary_label": "How it works",
        "secondary_url": "/pages/web3-onboarding",
        "image": "shopify://shop_images/web3-illustration.png",
        "bg_image": "shopify://shop_images/web3-bg-grid.png",
        "show_icons": true,
        "simulate_connected": false,
        "background_style": "accent",
        "alignment": "start"
      },
      "blocks": [
        { "type": "wallet_icon", "settings": { "icon_library": "lucide", "icon_filename": "wallet", "icon_custom_path": "", "icon_color": "#7c3aed", "icon_svg": "", "alt_text": "Wallet" } },
        { "type": "wallet_icon", "settings": { "icon_library": "tabler-outline", "icon_filename": "brand-walletconnect", "icon_custom_path": "", "icon_color": "#0ea5e9", "icon_svg": "", "alt_text": "WalletConnect" } },
        { "type": "wallet_icon", "settings": { "icon_library": "tabler-filled", "icon_filename": "brand-coinbase", "icon_custom_path": "", "icon_color": "#2563eb", "icon_svg": "", "alt_text": "Coinbase Wallet" } }
      ]
    }
  ]
}
{% endschema %}
