{% comment %}
  Slideshow Banner — Clean Rebuild (strict Liquid-safe)
  - Removed any inline "then" syntax
  - No filters inside IF conditions
  - No "contains '/' == false" comparisons (use boolean flags)
  - Optional /pages/files/ → /files/ normalization
{% endcomment %}

{%- liquid
  assign S = section.settings

  # Map min_height token to real values for CSS var
  assign __min = '75vh'
  if S.min_height == 'min-h-screen'
    assign __min = '100vh'
  elsif S.min_height == 'min-h-[60vh]'
    assign __min = '60vh'
  elsif S.min_height == 'min-h-[75vh]'
    assign __min = '75vh'
  endif

  # Container padding mode
  assign __padx = ''
  if S.container_mode == 'contained' or S.container_mode == blank
    assign __padx = 'q-pad-contained'
  endif

  # Visibility classes
  assign __vis = ''
  if S.hide_on_mobile
    assign __vis = __vis | append: ' q-hide-mobile'
  endif
  if S.hide_on_desktop
    assign __vis = __vis | append: ' q-hide-desktop'
  endif
-%}

<style>
  /* ===== Base / Layout ===== */
  .qsl { position: relative; width:100%; min-height: var(--q-min,75vh); overflow:hidden; }
  .qsl__viewport { position: relative; min-height: inherit; margin-top: var(--q-mt,0px); margin-bottom: var(--q-mb,0px); }
  .qsl__track { display:flex; align-items:stretch; min-height:inherit; will-change: transform; transform: translate3d(0,0,0); }
  .qsl__slide { position:relative; flex:0 0 100%; min-height:inherit; width:100%; }

  /* Editor-safety for fade */
  [data-qsl][data-transition="fade"] .qsl__track{ position:relative; }
  [data-qsl][data-transition="fade"] [data-qsl-slide]{ position:absolute; inset:0; transition: opacity 500ms ease; pointer-events:none; opacity:0; }
  [data-qsl][data-transition="fade"] [data-qsl-slide][data-active]{ pointer-events:auto; opacity:1; }
  html.shopify-design-mode [data-qsl][data-transition="fade"]:not([data-q-ready="true"]) [data-qsl-slide]{ opacity:1 !important; pointer-events:auto !important; }

  /* Hero media layers */
  .qsl__bg, .qsl-split__media { position:absolute; inset:0; z-index:0; overflow:hidden; }
  .qsl__layer { position:relative; z-index:1; min-height:inherit; display:flex; }
  .qsl__img, .qsl__video { width:100%; height:100%; object-fit:cover; display:block; }
  .qsl__overlay { position:absolute; inset:0; pointer-events:none; }

  /* Split layout */
  .qsl-split { display:grid; grid-template-columns: 1fr; min-height:inherit; }
  @media (min-width: 768px) { .qsl-split { grid-template-columns: 1fr 1fr; } }
  .qsl-split__content { position:relative; z-index:1; display:flex; }
  .qsl-split__content::before{
    content:""; position:absolute; inset: clamp(6px, 1vw, 14px);
    background: var(--panel-bg,transparent); opacity: var(--panel-o,0);
    border-radius: var(--panel-r,0); border: var(--panel-bw,0) solid var(--panel-bc,transparent);
    box-shadow: var(--panel-shadow, none); z-index:-1;
    backdrop-filter: var(--panel-blur, none); -webkit-backdrop-filter: var(--panel-blur, none);
  }

  /* Content container & placement */
  .q-pad-contained { padding-left: clamp(16px, 4vw, 40px); padding-right: clamp(16px, 4vw, 40px); }
  .qsl__content { display:flex; width:100%; }
  .qsl__stack { margin-left:auto; margin-right:auto; display:flex; flex-direction:column; gap: var(--q-gap,10px);
                max-width: var(--q-maxw, max(62ch, 48rem)); padding-top: var(--q-pt,60px); padding-bottom: var(--q-pb,60px); }
  .qsl__content { align-items: var(--v-m, center); justify-content: var(--h-m, center); }
  @media (min-width:768px){
    .qsl__content { align-items: var(--v-d, center); justify-content: var(--h-d, center); }
  }
  .q-text-left { text-align:left; } .q-text-center{ text-align:center; } .q-text-right{ text-align:right; }

  /* Type scale */
  .q-type-sm{ font-size:.875rem; line-height:1.25rem; }
  .q-type-base{ font-size:1rem; line-height:1.5rem; }
  .q-type-lg{ font-size:1.125rem; line-height:1.75rem; }
  .q-type-xl{ font-size:1.25rem; line-height:1.75rem; }
  .q-type-3xl{ font-size:1.875rem; line-height:2.25rem; }
  .q-type-4xl{ font-size:2.25rem; line-height:2.5rem; }
  .q-type-5xl{ font-size:3rem; line-height:1.1; }
  .q-type-6xl{ font-size:3.75rem; line-height:1.05; }
  .q-kicker{ letter-spacing:.08em; text-transform:uppercase; font-weight:600; margin:0 0 .25rem; }
  .q-heading{ font-weight:800; margin:.25rem 0 .5rem; }
  .q-sub{ margin:0 0 1rem; }
  .q-text-shadow{ text-shadow: 0 2px 16px rgba(0,0,0,.45); }

  /* Buttons */
  .q-ctas{ display:flex; flex-wrap:wrap; gap:.75rem; margin-top:.25rem; justify-content: var(--cta-justify, center); }
  .q-btn{ display:inline-flex; align-items:center; justify-content:center; text-decoration:none; cursor:pointer;
          padding: var(--btn-py,12px) var(--btn-px,24px); border-radius: var(--btn-r,6px);
          font-weight: var(--btn-fw,600); text-transform: var(--btn-tt, none);
          transition: transform .15s ease, box-shadow .2s ease, background-color .2s ease, border-color .2s ease; }
  .q-btn--solid{ background: var(--btn-bg,#fff); color: var(--btn-fg,#000); border:0; }
  .q-btn--outline{ background: transparent; color: var(--btn-fg,#000); border: var(--btn-bw,1px) solid var(--btn-bc,#fff); }
  .q-btn--soft:hover{ transform: translateY(-1px); box-shadow: 0 8px 24px rgba(0,0,0,.15); }
  .q-btn--hard:hover{ transform: translateY(-2px); box-shadow: 0 14px 34px rgba(0,0,0,.22); }

  /* Arrows / Dots / Progress */
  .q-arrows{ position:absolute; inset-inline:0; display:flex; justify-content:space-between; pointer-events:none; z-index:12; }
  .q-arrows--centered{ top:50%; transform: translateY(-50%); }
  .q-arrows--edges{ top:12px; }
  .q-arrow{ pointer-events:auto; width:var(--arr-size,40px); height:var(--arr-size,40px); border-radius:var(--arr-radius,9999px);
            background: var(--arr-bg,rgba(0,0,0,.4)); color: var(--arr-fg,#fff); display:inline-flex; align-items:center; justify-content:center; border:0; }
  .q-arrows--light .q-arrow{ background: rgba(255,255,255,.7); color:#111; }

  .q-dots{ position:absolute; left:0; right:0; display:flex; justify-content:center; gap: var(--dots-gap,8px); z-index:12; }
  .q-dots--inside{ bottom:14px; } .q-dots--outside{ bottom:-18px; }
  .q-dot{ width:var(--dots-size,10px); height:var(--dots-size,10px); border-radius: var(--dots-radius,9999px);
          background: var(--dots-color, rgba(255,255,255,.55)); border:0; cursor:pointer; }
  .q-dot[aria-current="true"]{ background: var(--dots-active, #fff); }

  .q-progress{ position:absolute; left:0; right:0; z-index:13; }
  .q-progress--top{ top:0; } .q-progress--bottom{ bottom:0; }
  .q-progress__bar{ width:0; }

  /* Ken Burns */
  @keyframes qKen { 0%{transform:scale(1)} 100%{transform:scale(1.06)} }
  .q-ken { animation: qKen 20s linear infinite alternate; will-change: transform; }
  @media (prefers-reduced-motion: reduce){ .q-ken{ animation:none !important; } [data-qsl][data-transition="fade"] [data-qsl-slide]{ transition: none; } }

  /* Responsive visibility helpers */
  @media (max-width:767px){ .q-hide-mobile{ display:none !important; } }
  @media (min-width:768px){ .q-hide-desktop{ display:none !important; } }
</style>

<section
  id="{{ S.anchor_id | default: 'section-' | append: section.id }}"
  class="qsl qsl--{{ S.layout_mode | default: 'hero' }}{{ __vis }}"
  role="region"
  aria-label="{{ S.region_label | default: 'Slideshow banner' | escape }}"
  data-qsl
  data-transition="{{ S.transition | default: 'slide' }}"
  data-autoplay="{{ S.autoplay }}"
  data-interval="{{ S.autoplay_interval | default: 5 }}"
  data-progress="{{ S.show_progress }}"
  style="
    --q-min: {{ __min }};
    --q-pt: {{ S.padding_top | default: 60 }}px;
    --q-pb: {{ S.padding_bottom | default: 60 }}px;
    --q-mt: {{ S.margin_top | default: 0 }}px;
    --q-mb: {{ S.margin_bottom | default: 0 }}px;
    --q-gap: {{ S.stack_gap | default: 10 }}px;
    --arr-size: {{ S.arrows_size | default: 40 }}px;
    --arr-radius: {{ S.arrows_radius | default: 9999 }}px;
    --arr-bg: {{ S.arrows_bg | default: 'rgba(0,0,0,.4)' }};
    --arr-fg: {{ S.arrows_fg | default: '#fff' }};
    --dots-size: {{ S.dots_size | default: 10 }}px;
    --dots-gap: {{ S.dots_gap | default: 8 }}px;
    --dots-radius: {{ S.dots_radius | default: 12 }}px;
  ">
  {% if S.show_progress and section.blocks.size > 1 and S.autoplay %}
    <div class="q-progress q-progress--{{ S.progress_position | default: 'top' }}" aria-hidden="true">
      <div class="q-progress__bar" data-qsl-progress
           style="height: {{ S.progress_height | default: 3 }}px; background: {{ S.progress_color | default: '#ffffff' }}; border-radius: {{ S.progress_radius | default: 0 }}px;"></div>
    </div>
  {% endif %}

  <div class="qsl__viewport">
    <div class="qsl__track" data-qsl-track tabindex="0" aria-roledescription="carousel" aria-live="{% if S.autoplay %}off{% else %}polite{% endif %}">
      {% assign total = section.blocks.size %}
      {% for block in section.blocks %}
        {% assign B = block.settings %}

        {%- liquid
          # Text alignment
          assign _talign = B.text_alignment | default: S.default_text_alignment | default: 'center'

          # Placement (mobile / desktop)
          assign pm = B.content_position_mobile | default: S.default_content_position_mobile | default: 'center_center' | split: '_'
          assign pd = B.content_position | default: S.default_content_position | default: 'center_center' | split: '_'
          assign v_m = pm[0]
          assign h_m = pm[1]
          assign v_d = pd[0]
          assign h_d = pd[1]

          if v_m == 'start'
            assign v_m = 'flex-start'
          elsif v_m == 'end'
            assign v_m = 'flex-end'
          endif

          if h_m == 'start'
            assign h_m = 'flex-start'
          elsif h_m == 'end'
            assign h_m = 'flex-end'
          endif

          if v_d == 'start'
            assign v_d = 'flex-start'
          elsif v_d == 'end'
            assign v_d = 'flex-end'
          endif

          if h_d == 'start'
            assign h_d = 'flex-start'
          elsif h_d == 'end'
            assign h_d = 'flex-end'
          endif

          # Motion
          assign _motion = B.motion_preset | default: S.default_motion_preset | default: 'fade-up'

          # CTA group align
          assign cta_align = B.cta_group_align | default: 'center'
          assign _cta_justify = 'center'
          if cta_align == 'left'
            assign _cta_justify = 'flex-start'
          elsif cta_align == 'right'
            assign _cta_justify = 'flex-end'
          endif

          # Overlay / focal
          assign _overlay_c = B.overlay_color | default: S.overlay_color | default: '#000000'
          assign _overlay_o = B.overlay_opacity | default: S.overlay_opacity | default: 40
          assign _overlay_of = _overlay_o | divided_by: 100.0
          assign _focal = B.bg_position | default: S.bg_position | default: 'center'

          # Media inputs
          assign main = B.background_image
          assign mob  = B.mobile_image
          assign has_video = false
          if B.background_video != blank
            assign has_video = true
          endif

          # String versions & simple normalization
          assign main_s = main | append: ''
          assign mob_s  = mob  | append: ''
          if main_s contains '/pages/files/'
            assign main_s = main_s | replace: '/pages/files/', '/files/'
          endif
          if mob_s contains '/pages/files/'
            assign mob_s = mob_s | replace: '/pages/files/', '/files/'
          endif

          # Flags for "contains" that we can compare later
          assign main_has_protocol = false
          if main_s contains '://'
            assign main_has_protocol = true
          endif
          assign mob_has_protocol = false
          if mob_s contains '://'
            assign mob_has_protocol = true
          endif

          assign main_has_slash = false
          if main_s contains '/'
            assign main_has_slash = true
          endif
          assign mob_has_slash = false
          if mob_s contains '/'
            assign mob_has_slash = true
          endif

          assign main_has_dot = false
          if main_s contains '.'
            assign main_has_dot = true
          endif
          assign mob_has_dot = false
          if mob_s contains '.'
            assign mob_has_dot = true
          endif

          # Final srcs
          assign main_is_asset = false
          assign mob_is_asset  = false

          assign main_src = ''
          if main != blank
            assign main_src = main | image_url: width: 1920
          elsif main_has_protocol
            assign main_src = main_s
          elsif main_s contains '/files/'
            assign main_src = shop.url | append: main_s
          elsif main_s != '' and main_has_dot and main_has_slash == false
            assign main_src = main | asset_url
            assign main_is_asset = true
          endif

          assign mob_src = ''
          if mob != blank
            assign mob_src = mob | image_url: width: 1200
          elsif mob_has_protocol
            assign mob_src = mob_s
          elsif mob_s contains '/files/'
            assign mob_src = shop.url | append: mob_s
          elsif mob_s != '' and mob_has_dot and mob_has_slash == false
            assign mob_src = mob | asset_url
            assign mob_is_asset = true
          endif

          assign any_media = false
          if has_video or main_src != '' or mob_src != ''
            assign any_media = true
          endif

          # Buttons presence
          assign has_cta1 = false
          if B.cta_text != blank and B.cta_link != blank
            assign has_cta1 = true
          endif
          assign has_cta2 = false
          if B.cta2_text != blank and B.cta2_link != blank
            assign has_cta2 = true
          endif
        -%}

        <div class="qsl__slide"
             aria-roledescription="slide"
             aria-label="Slide {{ forloop.index }} of {{ total }}"
             data-qsl-slide
             {% if forloop.first %}data-active{% endif %}
             style="{% if S.transition == 'fade' %}opacity:{% if forloop.first %}1{% else %}0{% endif %};{% endif %}"
             {{ block.shopify_attributes }}>

          {% if S.layout_mode == 'split' %}
            <div class="qsl-split">
              <div class="qsl-split__media{% if B.ken_burns and has_video == false %} q-ken{% endif %}">
                {% if has_video %}
                  <video class="qsl__video" autoplay muted loop playsinline {% if forloop.first %}preload="auto"{% else %}preload="metadata"{% endif %} poster="{{ main_src }}">
                    <source src="{{ B.background_video | escape }}" type="video/mp4">
                  </video>
                {% elsif main_src != '' or mob_src != '' %}
                  {% assign wset = '600,900,1200,1500,1800,2100,2500' | split: ',' %}
                  <picture>
                    {% if mob_src != '' %}
                      {% if mob != blank or mob_is_asset or mob_has_protocol %}
                        <source media="(max-width: 767px)" srcset="{{ mob_src }}" sizes="(min-width: 990px) 50vw, 100vw">
                      {% else %}
                        <source media="(max-width: 767px)" srcset="{% for w in wset %}{{ B.mobile_image | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}" sizes="(min-width: 990px) 50vw, 100vw">
                      {% endif %}
                    {% endif %}
                    <img class="qsl__img"
                         alt="{{ B.image_alt | default: B.heading | escape }}"
                         {% if forloop.first %}loading="eager" fetchpriority="high"{% else %}loading="lazy"{% endif %}
                         decoding="async"
                         src="{{ main_src | default: mob_src }}"
                         {% if main_src != '' and main != blank and main_is_asset == false and main_has_protocol == false %}
                           srcset="{% for w in wset %}{{ B.background_image | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}"
                           sizes="(min-width: 990px) 50vw, 100vw"
                         {% endif %}
                         style="object-position: {{ _focal }};">
                  </picture>
                {% else %}
                  {{ 'lifestyle-1' | placeholder_svg_tag }}
                {% endif %}
                {% if any_media %}<div class="qsl__overlay" style="background: {{ _overlay_c }}; opacity: {{ _overlay_of }};"></div>{% endif %}
              </div>

              <div class="qsl-split__content"
                   style="--panel-bg: {{ S.split_panel_bg | default: 'transparent' }};
                          --panel-o: {{ S.split_panel_bg_opacity | default: 0 | divided_by: 100.0 }};
                          --panel-blur: {% if S.split_panel_blur %}blur(6px){% else %}none{% endif %};
                          --panel-r: {{ S.split_panel_radius | default: 0 }}px;
                          --panel-bw: {{ S.split_panel_border_w | default: 0 }}px;
                          --panel-bc: {{ S.split_panel_border_color | default: 'transparent' }};
                          --panel-shadow: {% if S.split_panel_shadow %}0 12px 30px rgba(0,0,0,.15){% else %}none{% endif %};">
                <div class="qsl__content {{ __padx }}"
                     style="--v-m: {{ v_m }}; --h-m: {{ h_m }}; --v-d: {{ v_d }}; --h-d: {{ h_d }};
                            --q-maxw: {{ S.content_max_w | default: 'max(62ch, 48rem)' }};
                            --cta-justify: {{ _cta_justify }};">
                  <div class="qsl__stack q-text-{{ _talign }} {% if _motion != 'none' %}q-anim q-anim--{{ _motion }}{% endif %}">
                    {% if B.kicker != blank %}
                      <p class="q-kicker q-type-{{ B.kicker_size | default: 'sm' }}" style="color: {{ B.kicker_color | default: S.kicker_color_global | default: '#ffffff' }};">{{ B.kicker }}</p>
                    {% endif %}

                    {% if B.heading != blank %}
                      {% if forloop.first %}
                        <h1 class="q-heading q-type-{{ B.heading_size | default: S.heading_size_global | default: '5xl' }}{% if S.text_shadow %} q-text-shadow{% endif %}"
                            style="color: {{ B.heading_color | default: S.heading_color_global | default: '#ffffff' }};">{{ B.heading }}</h1>
                      {% else %}
                        <h2 class="q-heading q-type-{{ B.heading_size | default: S.heading_size_global | default: '5xl' }}{% if S.text_shadow %} q-text-shadow{% endif %}"
                            style="color: {{ B.heading_color | default: S.heading_color_global | default: '#ffffff' }};">{{ B.heading }}</h2>
                      {% endif %}
                    {% endif %}

                    {% if B.subheading != blank and B.hide_text_mobile != true %}
                      <p class="q-sub q-type-{{ B.subheading_size | default: S.subheading_size_global | default: 'lg' }}{% if S.text_shadow and S.text_shadow_sub %} q-text-shadow{% endif %}"
                         style="color: {{ B.subheading_color | default: S.subheading_color_global | default: '#ffffff' }};">{{ B.subheading }}</p>
                    {% endif %}

                    {% if has_cta1 or has_cta2 %}
                      <div class="q-ctas{% if B.hide_buttons_mobile %} q-ctas--hide-mobile{% endif %}">
                        {% if has_cta1 %}
                          <a href="{{ B.cta_link }}" aria-label="{{ B.cta_aria_label | default: B.cta_text | escape }}"
                             class="q-btn {% if S.button_mode == 'outline' %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ S.button_treatment | default: 'soft' }}"
                             style="--btn-bg: {{ S.button_bg_color | default: '#ffffff' }};
                                    --btn-fg: {{ S.button_text_color | default: '#000000' }};
                                    --btn-bc: {{ S.button_border_color | default: '#ffffff' }};
                                    --btn-bw: {{ S.button_border_width | default: 1 }}px;
                                    --btn-r:  {{ S.button_radius | default: 6 }}px;
                                    --btn-py: {{ S.button_padding_vertical | default: 12 }}px;
                                    --btn-px: {{ S.button_padding_horizontal | default: 24 }}px;
                                    --btn-tt: {% if S.button_uppercase %}uppercase{% else %}none{% endif %};
                                    --btn-fw: {{ S.button_font_weight | default: 600 }};">{{ B.cta_text }}</a>
                        {% endif %}
                        {% if has_cta2 %}
                          <a href="{{ B.cta2_link }}" aria-label="{{ B.cta2_aria_label | default: B.cta2_text | escape }}"
                             class="q-btn {% if S.button_mode == 'outline' %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ S.button_treatment | default: 'soft' }}"
                             style="--btn-bg: {{ S.button_bg_color | default: '#ffffff' }};
                                    --btn-fg: {{ S.button_text_color | default: '#000000' }};
                                    --btn-bc: {{ S.button_border_color | default: '#ffffff' }};
                                    --btn-bw: {{ S.button_border_width | default: 1 }}px;
                                    --btn-r:  {{ S.button_radius | default: 6 }}px;
                                    --btn-py: {{ S.button_padding_vertical | default: 12 }}px;
                                    --btn-px: {{ S.button_padding_horizontal | default: 24 }}px;
                                    --btn-tt: {% if S.button_uppercase %}uppercase{% else %}none{% endif %};
                                    --btn-fw: {{ S.button_font_weight | default: 600 }};">{{ B.cta2_text }}</a>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
          {% else %}
            <div class="qsl__bg{% if B.ken_burns and has_video == false %} q-ken{% endif %}">
              {% if has_video %}
                <video class="qsl__video" autoplay muted loop playsinline {% if forloop.first %}preload="auto"{% else %}preload="metadata"{% endif %} poster="{{ main_src }}">
                  <source src="{{ B.background_video | escape }}" type="video/mp4">
                </video>
              {% elsif main_src != '' or mob_src != '' %}
                {% assign wset = '600,900,1200,1500,1800,2100,2500' | split: ',' %}
                <picture>
                  {% if mob_src != '' %}
                    {% if mob != blank or mob_is_asset or mob_has_protocol %}
                      <source media="(max-width: 767px)" srcset="{{ mob_src }}" sizes="100vw">
                    {% else %}
                      <source media="(max-width: 767px)" srcset="{% for w in wset %}{{ B.mobile_image | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}" sizes="100vw">
                    {% endif %}
                  {% endif %}
                  <img class="qsl__img"
                       alt="{{ B.image_alt | default: B.heading | escape }}"
                       {% if forloop.first %}loading="eager" fetchpriority="high"{% else %}loading="lazy"{% endif %}
                       decoding="async"
                       src="{{ main_src | default: mob_src }}"
                       {% if main_src != '' and main != blank and main_is_asset == false and main_has_protocol == false %}
                         srcset="{% for w in wset %}{{ B.background_image | image_url: width: w }} {{ w }}w{% unless forloop.last %}, {% endunless %}{% endfor %}"
                         sizes="100vw"
                       {% endif %}
                       style="object-position: {{ _focal }};">
                </picture>
              {% else %}
                {{ 'lifestyle-1' | placeholder_svg_tag }}
              {% endif %}
              {% if any_media %}<div class="qsl__overlay" style="background: {{ _overlay_c }}; opacity: {{ _overlay_of }};"></div>{% endif %}
            </div>

            <div class="qsl__layer">
              <div class="qsl__content {{ __padx }}"
                   style="--v-m: {{ v_m }}; --h-m: {{ h_m }}; --v-d: {{ v_d }}; --h-d: {{ h_d }};
                          --q-maxw: {{ S.content_max_w | default: 'max(62ch, 48rem)' }};
                          --cta-justify: {{ _cta_justify }};">
                <div class="qsl__stack q-text-{{ _talign }} {% if _motion != 'none' %}q-anim q-anim--{{ _motion }}{% endif %}">
                  {% if B.kicker != blank %}
                    <p class="q-kicker q-type-{{ B.kicker_size | default: 'sm' }}" style="color: {{ B.kicker_color | default: S.kicker_color_global | default: '#ffffff' }};">{{ B.kicker }}</p>
                  {% endif %}

                  {% if B.heading != blank %}
                    {% if forloop.first %}
                      <h1 class="q-heading q-type-{{ B.heading_size | default: S.heading_size_global | default: '5xl' }}{% if S.text_shadow %} q-text-shadow{% endif %}"
                          style="color: {{ B.heading_color | default: S.heading_color_global | default: '#ffffff' }};">{{ B.heading }}</h1>
                    {% else %}
                      <h2 class="q-heading q-type-{{ B.heading_size | default: S.heading_size_global | default: '5xl' }}{% if S.text_shadow %} q-text-shadow{% endif %}"
                          style="color: {{ B.heading_color | default: S.heading_color_global | default: '#ffffff' }};">{{ B.heading }}</h2>
                    {% endif %}
                  {% endif %}

                  {% if B.subheading != blank and B.hide_text_mobile != true %}
                    <p class="q-sub q-type-{{ B.subheading_size | default: S.subheading_size_global | default: 'lg' }}{% if S.text_shadow and S.text_shadow_sub %} q-text-shadow{% endif %}"
                       style="color: {{ B.subheading_color | default: S.subheading_color_global | default: '#ffffff' }};">{{ B.subheading }}</p>
                  {% endif %}

                  {% if has_cta1 or has_cta2 %}
                    <div class="q-ctas{% if B.hide_buttons_mobile %} q-ctas--hide-mobile{% endif %}">
                      {% if has_cta1 %}
                        <a href="{{ B.cta_link }}" aria-label="{{ B.cta_aria_label | default: B.cta_text | escape }}"
                           class="q-btn {% if S.button_mode == 'outline' %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ S.button_treatment | default: 'soft' }}"
                           style="--btn-bg: {{ S.button_bg_color | default: '#ffffff' }};
                                  --btn-fg: {{ S.button_text_color | default: '#000000' }};
                                  --btn-bc: {{ S.button_border_color | default: '#ffffff' }};
                                  --btn-bw: {{ S.button_border_width | default: 1 }}px;
                                  --btn-r:  {{ S.button_radius | default: 6 }}px;
                                  --btn-py: {{ S.button_padding_vertical | default: 12 }}px;
                                  --btn-px: {{ S.button_padding_horizontal | default: 24 }}px;
                                  --btn-tt: {% if S.button_uppercase %}uppercase{% else %}none{% endif %};
                                  --btn-fw: {{ S.button_font_weight | default: 600 }};">{{ B.cta_text }}</a>
                      {% endif %}
                      {% if has_cta2 %}
                        <a href="{{ B.cta2_link }}" aria-label="{{ B.cta2_aria_label | default: B.cta2_text | escape }}"
                           class="q-btn {% if S.button_mode == 'outline' %}q-btn--outline{% else %}q-btn--solid{% endif %} q-btn--{{ S.button_treatment | default: 'soft' }}"
                           style="--btn-bg: {{ S.button_bg_color | default: '#ffffff' }};
                                  --btn-fg: {{ S.button_text_color | default: '#000000' }};
                                  --btn-bc: {{ S.button_border_color | default: '#ffffff' }};
                                  --btn-bw: {{ S.button_border_width | default: 1 }}px;
                                  --btn-r:  {{ S.button_radius | default: 6 }}px;
                                  --btn-py: {{ S.button_padding_vertical | default: 12 }}px;
                                  --btn-px: {{ S.button_padding_horizontal | default: 24 }}px;
                                  --btn-tt: {% if S.button_uppercase %}uppercase{% else %}none{% endif %};
                                  --btn-fw: {{ S.button_font_weight | default: 600 }};">{{ B.cta2_text }}</a>
                      {% endif %}
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>
          {% endif %}
        </div>
      {% endfor %}
    </div>

    {% if section.blocks.size > 1 %}
      {% if S.show_arrows %}
        <div class="q-arrows {% if S.arrows_position == 'edges' %}q-arrows--edges{% else %}q-arrows--centered{% endif %} {% if S.arrows_theme == 'light' %}q-arrows--light{% endif %}">
          <button type="button" class="q-arrow" aria-label="Previous slide" data-qsl-prev style="--arr-bg: {{ S.arrows_bg | default: 'rgba(0,0,0,.4)' }}; --arr-fg: {{ S.arrows_fg | default: '#fff' }};"><span aria-hidden="true">‹</span></button>
          <button type="button" class="q-arrow" aria-label="Next slide" data-qsl-next style="--arr-bg: {{ S.arrows_bg | default: 'rgba(0,0,0,.4)' }}; --arr-fg: {{ S.arrows_fg | default: '#fff' }};"><span aria-hidden="true">›</span></button>
        </div>
      {% endif %}

      {% if S.show_dots %}
        <div class="q-dots q-dots--{{ S.dots_position | default: 'inside' }}">
          {% for block in section.blocks %}
            <button type="button" class="q-dot" aria-label="Go to slide {{ forloop.index }}" data-qsl-dot data-index="{{ forloop.index0 }}"
                    style="--dots-color: {{ S.dots_color | default: 'rgba(255,255,255,.55)' }}; --dots-active: {{ S.dots_active_color | default: '#ffffff' }};"></button>
          {% endfor %}
        </div>
      {% endif %}
    {% endif %}
  </div>
</section>

<script>
(function(){
  function init(root){
    if(!root || root.__inited) return;
    const track = root.querySelector('[data-qsl-track]');
    const slides = Array.from(root.querySelectorAll('[data-qsl-slide]'));
    if(!track || slides.length === 0){ return; }
    root.__inited = true;

    const dots = Array.from(root.querySelectorAll('[data-qsl-dot]'));
    const prevBtn = root.querySelector('[data-qsl-prev]');
    const nextBtn = root.querySelector('[data-qsl-next]');
    const progress = root.querySelector('[data-qsl-progress]');

    const transition = root.dataset.transition || 'slide';
    const autoplay = String(root.dataset.autoplay) === 'true';
    const intervalSec = Math.max(3, parseInt(root.dataset.interval || '5', 10));
    const showProgress = String(root.dataset.progress) === 'true';
    const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    let idx = Math.max(0, slides.findIndex(s => s.hasAttribute('data-active')));
    if(idx === -1) idx = 0;
    let timer = null, paused = false, resizing = false;

    root.setAttribute('data-q-ready', 'true');

    function setActive(){
      slides.forEach((s,i)=>{
        const on = i===idx;
        if(on){ s.setAttribute('data-active',''); } else { s.removeAttribute('data-active'); }
        if(transition==='fade'){
          s.style.opacity = on ? '1' : '0';
          s.style.pointerEvents = on ? 'auto' : 'none';
        }
      });
      dots.forEach((d,i)=>{ if(i===idx){ d.setAttribute('aria-current','true'); d.classList.add('is-active'); }
                            else { d.removeAttribute('aria-current'); d.classList.remove('is-active'); }});
      slides.forEach((s,i)=> s.querySelectorAll('.q-anim').forEach(el=> i===idx ? el.classList.add('is-in') : el.classList.remove('is-in')));
    }

    function slideWidth(){ return root.getBoundingClientRect().width; }

    function moveTo(i, snap){
      if(transition==='fade'){ return; }
      const x = -i * slideWidth();
      if(snap){ track.style.transition = 'none'; }
      track.style.transform = 'translate3d('+x+'px,0,0)';
      if(snap){
        requestAnimationFrame(()=>{ track.style.transition = 'transform 500ms ease'; });
      }
    }

    function resetProgress(){
      if(!progress || !autoplay || prefersReduced || !showProgress) return;
      progress.style.transition = 'none';
      progress.style.width = '0%';
      requestAnimationFrame(()=>{ requestAnimationFrame(()=>{
        progress.style.transition = 'width '+intervalSec+'s linear';
        progress.style.width = '100%';
      });});
    }

    function goTo(i){
      idx = (i + slides.length) % slides.length;
      if(transition==='slide'){ moveTo(idx, false); }
      setActive();
      resetProgress();
      const img = slides[idx].querySelector('img.qsl__img');
      if(img && img.decode){ img.decode().catch(()=>{}); }
    }

    function next(){ goTo(idx+1); }
    function prev(){ goTo(idx-1); }

    function start(){
      if(!autoplay || prefersReduced || slides.length < 2) return;
      stop();
      timer = setInterval(()=>{ if(!paused) next(); }, intervalSec*1000);
      resetProgress();
    }
    function stop(){
      if(timer){ clearInterval(timer); timer = null; }
      if(progress){ progress.style.transition = 'none'; }
    }

    prevBtn && prevBtn.addEventListener('click', prev);
    nextBtn && nextBtn.addEventListener('click', next);
    dots.forEach(d => d.addEventListener('click', ()=>{
      const k = parseInt(d.dataset.index || '0',10); if(!isNaN(k)) goTo(k);
    }));
    track.addEventListener('keydown', (e)=>{
      if(e.key==='ArrowRight'){ e.preventDefault(); next(); }
      if(e.key==='ArrowLeft'){ e.preventDefault(); prev(); }
    });
    root.addEventListener('mouseenter', ()=> paused=true);
    root.addEventListener('mouseleave', ()=> paused=false);
    root.addEventListener('focusin',  ()=> paused=true);
    root.addEventListener('focusout', ()=> paused=false);

    function onResize(){
      if(resizing) return; resizing = true;
      requestAnimationFrame(()=>{ if(transition==='slide') moveTo(idx, true); resizing=false; });
    }
    window.addEventListener('resize', onResize);

    if(transition==='slide'){ track.style.transition = 'transform 500ms ease'; moveTo(idx, true); }
    setActive();
    start();
  }

  function boot(){ document.querySelectorAll('[data-qsl]').forEach(init); }
  if(document.readyState === 'loading'){ document.addEventListener('DOMContentLoaded', boot); } else { boot(); }

  document.addEventListener('shopify:section:load', (e)=> {
    const root = e.target.querySelector('[data-qsl]'); if(root) init(root);
  });
  document.addEventListener('shopify:section:select', (e)=> {
    const root = e.target.querySelector('[data-qsl]'); if(root) init(root);
  });
})();
</script>

{% schema %}
{
  "name": "Slideshow Banner",
  "tag": "section",
  "class": "q-carousel-hero",
  "settings": [
    { "type": "header", "content": "Layout" },
    { "type": "select", "id": "layout_mode", "label": "Layout", "default": "hero", "options": [
      { "value": "hero", "label": "Full-bleed hero" },
      { "value": "split", "label": "Split (image + content)" }
    ]},

    { "type": "header", "content": "Global placement defaults" },
    { "type": "select", "id": "default_content_position", "label": "Default placement (desktop)", "default": "center_center",
      "options": [
        { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
        { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
        { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
      ]
    },
    { "type": "select", "id": "default_content_position_mobile", "label": "Default placement (mobile)", "default": "center_center",
      "options": [
        { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
        { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
        { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
      ]
    },
    { "type": "select", "id": "default_text_alignment", "label": "Default text alignment", "default": "center",
      "options": [{ "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }]
    },
    { "type": "select", "id": "default_motion_preset", "label": "Default text animation", "default": "fade-up", "options": [
      { "value": "none", "label": "None" },
      { "value": "fade-up", "label": "Fade up" },
      { "value": "slide-up", "label": "Slide up" }
    ]},

    { "type": "header", "content": "Defaults (applied when slide fields empty)" },
    { "type": "color", "id": "overlay_color", "label": "Default overlay color", "default": "#000000" },
    { "type": "range", "id": "overlay_opacity", "label": "Default overlay opacity", "min": 0, "max": 100, "step": 5, "default": 40 },
    { "type": "select", "id": "bg_position", "label": "Default image focal point", "default": "center", "options": [
      { "value": "center", "label": "Center" }, { "value": "top", "label": "Top" }, { "value": "bottom", "label": "Bottom" },
      { "value": "left", "label": "Left" }, { "value": "right", "label": "Right" },
      { "value": "top left", "label": "Top left" }, { "value": "top right", "label": "Top right" },
      { "value": "bottom left", "label": "Bottom left" }, { "value": "bottom right", "label": "Bottom right" }
    ]},

    { "type": "header", "content": "Behavior" },
    { "type": "checkbox", "id": "autoplay", "label": "Auto-rotate slides", "default": true },
    { "type": "range", "id": "autoplay_interval", "label": "Time between slides (seconds)", "min": 3, "max": 12, "step": 1, "default": 5 },
    { "type": "select", "id": "transition", "label": "Transition", "default": "slide", "options": [
      { "value": "slide", "label": "Slide" },
      { "value": "fade", "label": "Fade (crossfade)" }
    ]},

    { "type": "header", "content": "Arrows / Dots / Progress" },
    { "type": "checkbox", "id": "show_arrows", "label": "Show left/right arrows", "default": true },
    { "type": "select", "id": "arrows_theme", "label": "Arrow theme", "default": "dark", "options": [
      { "value": "dark", "label": "Dark (on light images)" }, { "value": "light", "label": "Light (on dark images)" }
    ]},
    { "type": "select", "id": "arrows_position", "label": "Arrow position", "default": "centered", "options": [
      { "value": "centered", "label": "Centered vertically" }, { "value": "edges", "label": "Near top edge" }
    ]},
    { "type": "range", "id": "arrows_size", "label": "Arrow size (px)", "min": 28, "max": 64, "step": 2, "default": 40 },
    { "type": "range", "id": "arrows_radius", "label": "Arrow radius (px)", "min": 0, "max": 40, "step": 2, "default": 40 },
    { "type": "color", "id": "arrows_bg", "label": "Arrow background", "default": "#000000" },
    { "type": "color", "id": "arrows_fg", "label": "Arrow icon color", "default": "#FFFFFF" },

    { "type": "checkbox", "id": "show_dots", "label": "Show dots under the slides", "default": true },
    { "type": "select", "id": "dots_position", "label": "Dots position", "default": "inside", "options": [
      { "value": "inside", "label": "Inside banner" }, { "value": "outside", "label": "Outside (below)" }
    ]},
    { "type": "range", "id": "dots_size", "label": "Dot size (px)", "min": 6, "max": 16, "step": 1, "default": 10 },
    { "type": "range", "id": "dots_radius", "label": "Dot radius (px)", "min": 0, "max": 12, "step": 1, "default": 12 },
    { "type": "range", "id": "dots_gap", "label": "Dot gap (px)", "min": 4, "max": 20, "step": 1, "default": 8 },
    { "type": "color", "id": "dots_color", "label": "Dot color", "default": "#999999" },
    { "type": "color", "id": "dots_active_color", "label": "Active dot color", "default": "#FFFFFF" },

    { "type": "checkbox", "id": "show_progress", "label": "Show progress bar (autoplay)", "default": false },
    { "type": "select", "id": "progress_position", "label": "Progress bar position", "default": "top", "options": [
      { "value": "top", "label": "Top" }, { "value": "bottom", "label": "Bottom" }
    ]},
    { "type": "range", "id": "progress_height", "label": "Progress bar height (px)", "min": 2, "max": 8, "step": 1, "default": 3 },
    { "type": "range", "id": "progress_radius", "label": "Progress bar radius (px)", "min": 0, "max": 8, "step": 1, "default": 0 },
    { "type": "color", "id": "progress_color", "label": "Progress bar color", "default": "#FFFFFF" },

    { "type": "header", "content": "Layout & spacing" },
    { "type": "select", "id": "min_height", "label": "Banner height", "default": "min-h-[75vh]", "options": [
      { "value": "min-h-[60vh]", "label": "Short" }, { "value": "min-h-[75vh]", "label": "Medium" }, { "value": "min-h-screen", "label": "Full screen" }
    ]},
    { "type": "select", "id": "container_mode", "label": "Text container", "default": "contained", "options": [
      { "value": "contained", "label": "Contained (side padding)" }, { "value": "full", "label": "Full-bleed (edge to edge)" }
    ]},
    { "type": "select", "id": "content_max_w", "label": "Text width (max)", "default": "max(62ch, 48rem)", "options": [
      { "value": "48rem", "label": "48rem (approx. 768px)" }, { "value": "56rem", "label": "56rem (approx. 896px)" }, { "value": "max(62ch, 48rem)", "label": "Comfort (recommended)" }
    ]},
    { "type": "range", "id": "padding_top", "label": "Padding top", "min": 0, "max": 240, "step": 10, "default": 60 },
    { "type": "range", "id": "padding_bottom", "label": "Padding bottom", "min": 0, "max": 240, "step": 10, "default": 60 },
    { "type": "range", "id": "margin_top", "label": "Margin top", "min": 0, "max": 120, "step": 10, "default": 0 },
    { "type": "range", "id": "margin_bottom", "label": "Margin bottom", "min": 0, "max": 120, "step": 10, "default": 0 },
    { "type": "range", "id": "stack_gap", "label": "Spacing between text and buttons (px)", "min": 0, "max": 40, "step": 2, "default": 10 },

    { "type": "header", "content": "Global text style (optional defaults)" },
    { "type": "color", "id": "kicker_color_global", "label": "Kicker color (default)", "default": "#FFFFFF" },
    { "type": "color", "id": "heading_color_global", "label": "Heading color (default)", "default": "#FFFFFF" },
    { "type": "color", "id": "subheading_color_global", "label": "Subheading color (default)", "default": "#FFFFFF" },
    { "type": "select", "id": "heading_size_global", "label": "Heading size (default)", "default": "5xl", "options": [
      { "value": "3xl", "label": "3XL" }, { "value": "4xl", "label": "4XL" }, { "value": "5xl", "label": "5XL" }, { "value": "6xl", "label": "6XL" }
    ]},
    { "type": "select", "id": "subheading_size_global", "label": "Subheading size (default)", "default": "lg", "options": [
      { "value": "base", "label": "Base" }, { "value": "lg", "label": "Large" }, { "value": "xl", "label": "XL" }
    ]},
    { "type": "checkbox", "id": "text_shadow", "label": "Add soft text shadow to headings", "default": false },
    { "type": "checkbox", "id": "text_shadow_sub", "label": "Add text shadow to subheading", "default": false },

    { "type": "header", "content": "Buttons (apply to all slides)" },
    { "type": "select", "id": "button_mode", "label": "Button base style", "options": [
      { "value": "solid", "label": "Solid" }, { "value": "outline", "label": "Outline" }], "default": "solid"
    },
    { "type": "select", "id": "button_treatment", "label": "Hover treatment", "default": "soft", "options": [
      { "value": "soft", "label": "Soft shadow" }, { "value": "hard", "label": "Hard shadow" }, { "value": "none", "label": "None" }
    ]},
    { "type": "color", "id": "button_bg_color", "label": "Button background (solid)", "default": "#FFFFFF" },
    { "type": "color", "id": "button_text_color", "label": "Button text color", "default": "#000000" },
    { "type": "color", "id": "button_border_color", "label": "Button border color (outline)", "default": "#FFFFFF" },
    { "type": "range", "id": "button_border_width", "label": "Button border width (outline)", "min": 0, "max": 10, "step": 1, "default": 1 },
    { "type": "range", "id": "button_radius", "label": "Button corner radius", "min": 0, "max": 50, "step": 2, "default": 6 },
    { "type": "range", "id": "button_padding_vertical", "label": "Button padding (top/bottom)", "min": 6, "max": 40, "step": 2, "default": 12 },
    { "type": "range", "id": "button_padding_horizontal", "label": "Button padding (left/right)", "min": 12, "max": 48, "step": 2, "default": 24 },
    { "type": "checkbox", "id": "button_uppercase", "label": "Uppercase buttons", "default": false },
    { "type": "range", "id": "button_font_weight", "label": "Button font weight", "min": 400, "max": 800, "step": 50, "default": 600 },

    { "type": "header", "content": "Split panel cosmetics" },
    { "type": "color", "id": "split_panel_bg", "label": "Panel background color", "default": "#FFFFFF" },
    { "type": "range", "id": "split_panel_bg_opacity", "label": "Panel background opacity (%)", "min": 0, "max": 100, "step": 5, "default": 0 },
    { "type": "checkbox", "id": "split_panel_blur", "label": "Backdrop blur", "default": false },
    { "type": "range", "id": "split_panel_radius", "label": "Panel radius (px)", "min": 0, "max": 40, "step": 2, "default": 0 },
    { "type": "range", "id": "split_panel_border_w", "label": "Panel border width (px)", "min": 0, "max": 6, "step": 1, "default": 0 },
    { "type": "color", "id": "split_panel_border_color", "label": "Panel border color", "default": "#000000" },
    { "type": "checkbox", "id": "split_panel_shadow", "label": "Panel shadow", "default": false },

    { "type": "header", "content": "Visibility & anchors" },
    { "type": "text", "id": "anchor_id", "label": "Optional anchor ID" },
    { "type": "text", "id": "region_label", "label": "Accessible region label", "default": "Slideshow banner" },
    { "type": "checkbox", "id": "hide_on_mobile", "label": "Hide on mobile", "default": false },
    { "type": "checkbox", "id": "hide_on_desktop", "label": "Hide on desktop", "default": false }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        { "type": "header", "content": "Background media" },
        { "type": "image_picker", "id": "background_image", "label": "Background image" },
        { "type": "image_picker", "id": "mobile_image", "label": "Mobile image (optional)", "info": "Shown on screens under 768px" },
        { "type": "text", "id": "background_video", "label": "Background video URL (MP4)", "info": "Optional; if used, provide a poster via Background image" },
        { "type": "text", "id": "image_alt", "label": "Image alt text", "info": "Describe the image; leave blank if decorative." },
        { "type": "select", "id": "bg_position", "label": "Image focal point (override)", "options": [
          { "value": "center", "label": "Center" }, { "value": "top", "label": "Top" }, { "value": "bottom", "label": "Bottom" },
          { "value": "left", "label": "Left" }, { "value": "right", "label": "Right" },
          { "value": "top left", "label": "Top left" }, { "value": "top right", "label": "Top right" },
          { "value": "bottom left", "label": "Bottom left" }, { "value": "bottom right", "label": "Bottom right" }
        ]},

        { "type": "header", "content": "Overlay (override default)" },
        { "type": "color", "id": "overlay_color", "label": "Overlay color" },
        { "type": "range", "id": "overlay_opacity", "label": "Overlay opacity", "min": 0, "max": 100, "step": 5, "default": 40 },

        { "type": "header", "content": "Text" },
        { "type": "text", "id": "kicker", "label": "Small label (kicker)" },
        { "type": "color", "id": "kicker_color", "label": "Kicker color" },
        { "type": "select", "id": "kicker_size", "label": "Kicker size", "options": [
          { "value": "sm", "label": "Small" }, { "value": "base", "label": "Normal" }, { "value": "lg", "label": "Large" }], "default": "sm"
        },

        { "type": "text", "id": "heading", "label": "Headline" },
        { "type": "color", "id": "heading_color", "label": "Headline color" },
        { "type": "select", "id": "heading_size", "label": "Headline size", "options": [
          { "value": "3xl", "label": "3XL" }, { "value": "4xl", "label": "4XL" }, { "value": "5xl", "label": "5XL" }, { "value": "6xl", "label": "6XL" }], "default": "5xl"
        },

        { "type": "textarea", "id": "subheading", "label": "Short description" },
        { "type": "color", "id": "subheading_color", "label": "Description color" },
        { "type": "select", "id": "subheading_size", "label": "Description size", "options": [
          { "value": "base", "label": "Base" }, { "value": "lg", "label": "Large" }, { "value": "xl", "label": "XL" }], "default": "lg"
        },
        { "type": "checkbox", "id": "hide_text_mobile", "label": "Hide text on mobile", "default": false },

        { "type": "header", "content": "Buttons" },
        { "type": "select", "id": "cta_group_align", "label": "Button alignment", "default": "center", "options": [
          { "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }
        ]},
        { "type": "text", "id": "cta_text", "label": "Primary button text" },
        { "type": "url", "id": "cta_link", "label": "Primary button link" },
        { "type": "text", "id": "cta_aria_label", "label": "Primary ARIA label" },
        { "type": "text", "id": "cta2_text", "label": "Secondary button text" },
        { "type": "url", "id": "cta2_link", "label": "Secondary button link" },
        { "type": "text", "id": "cta2_aria_label", "label": "Secondary ARIA label" },
        { "type": "checkbox", "id": "hide_buttons_mobile", "label": "Hide buttons on mobile", "default": false },

        { "type": "header", "content": "Placement & Motion (overrides defaults)" },
        { "type": "select", "id": "text_alignment", "label": "Text alignment", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }
        ]},
        { "type": "select", "id": "content_position_mobile", "label": "Placement on mobile", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
          { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
          { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
        ]},
        { "type": "select", "id": "content_position", "label": "Placement on desktop", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "start_start", "label": "Top left" }, { "value": "start_center", "label": "Top center" }, { "value": "start_end", "label": "Top right" },
          { "value": "center_start", "label": "Middle left" }, { "value": "center_center", "label": "Middle center" }, { "value": "center_end", "label": "Middle right" },
          { "value": "end_start", "label": "Bottom left" }, { "value": "end_center", "label": "Bottom center" }, { "value": "end_end", "label": "Bottom right" }
        ]},
        { "type": "select", "id": "motion_preset", "label": "Text animation", "default": "", "options": [
          { "value": "", "label": "Use section default" },
          { "value": "none", "label": "None" }, { "value": "fade-up", "label": "Fade up" }, { "value": "slide-up", "label": "Slide up" }
        ]},
        { "type": "checkbox", "id": "ken_burns", "label": "Subtle pan/zoom on image (Ken Burns)", "default": false }
      ]
    }
  ],
  "max_blocks": 8,
  "presets": [
    { "name": "Slideshow Banner", "category": "Banner",
      "blocks": [
        { "type": "slide", "settings": { "heading": "New Season Essentials", "subheading": "Fresh looks engineered for comfort.", "cta_text": "Shop Women", "cta2_text": "Shop Men" } },
        { "type": "slide", "settings": { "heading": "Members Get More", "subheading": "Exclusive drops and early access.", "cta_text": "Join Free" } }
      ]
    },
    { "name": "Slideshow Banner (Split)", "category": "Banner", "settings": { "layout_mode": "split" },
      "blocks": [
        { "type": "slide", "settings": { "heading": "Crafted Essentials", "subheading": "Image left, content right.", "cta_text": "Shop Now" } },
        { "type": "slide", "settings": { "heading": "Editorial Layout", "subheading": "Split mode for richer stories.", "cta_text": "Discover" } }
      ]
    }
  ]
}
{% endschema %}
